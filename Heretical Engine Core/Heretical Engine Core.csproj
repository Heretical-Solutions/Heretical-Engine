<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
    <RootNamespace>HereticalSolutions</RootNamespace>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <DefineConstants>USE_THREAD_SAFE_RESOURCE_MANAGEMENT;PARALLELIZE_AWAITING_FOR_RESOURCE_DEPENDENCIES</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <!-- DI container -->
    <PackageReference Include="Autofac" Version="7.1.0" />
    <!-- <PackageReference Include="Autofac.Extras.Attributed" Version="3.3.0" /> -->
    <!-- <PackageReference Include="Autofac.Extras.AttributeMetadata" Version="6.0.0" /> -->

    <!-- ECS -->
    <PackageReference Include="DefaultEcs" Version="0.17.2" />

    <!-- Serializers -->
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="protobuf-net" Version="3.2.26" />
    <PackageReference Include="YamlDotNet" Version="13.7.0" />
    <PackageReference Include="CsvHelper" Version="30.0.1" />

    <!-- Asset import-->
    <PackageReference Include="Silk.NET.Assimp" Version="2.17.1" />

    <!-- Images -->
    <PackageReference Include="SixLabors.ImageSharp" Version="3.0.2" />

    <!-- Rendering and porting -->
    <PackageReference Include="Silk.NET" Version="2.17.1" />
    <PackageReference Include="Silk.NET.OpenGL" Version="2.17.1" />

    <!-- Language parsing-->
    <PackageReference Include="Antlr4BuildTasks" Version="12.4.0" PrivateAssets="all" />
    <PackageReference Include="Antlr4.Runtime.Standard" Version="4.13.1" />
    <!-- The following nuget packages are actually different from the ones that ANTLR4 extension for VSCode uses (included above). They
    are incompatible with the extension and generate code that has several API differences that you won't be able to resolve manually.
    For this reason they are commented about below as a reminder not to use them while the ones that are actually required are listed
    above. More details here: https://stackoverflow.com/a/41403473
    <PackageReference Include="Antlr4" Version="4.6.6">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Antlr4.Runtime" Version="4.6.6" />
    -->
    
    <!-- Debug -->
    <PackageReference Include="Silk.NET.OpenGL.Extensions.ImGui" Version="2.17.1" />

  </ItemGroup>

  <!-- The following is needed if ANTLR4 extension for VSCode is not installed to ensure that dotnet actually compiles the grammars.
  However, if it is installed and the gramar data is specified (including target language - C# and package/CustomToolSpace) in
  settings.json then all you have to do is to drop g4 files into the project and open them in VSCode. The extension will perform codegen
  immediately
  Another thing to note is that the code generated by the XML tags below is somehow not getting wrapped in the namespace specified like
  at all and is located in the bin/debug folder instead of the same folder that g4 file is in
  <ItemGroup>
    <Antlr4 Include="Engine/Grammars/GLSL/GLSLLexer.g4">
      <CustomToolNamespace>HereticalSolutions.HereticalEngine.Grammars</CustomToolNamespace>
      <Listener>False</Listener>
      <Visitor>True</Visitor>
    </Antlr4>

    <Antlr4 Include="Engine/Grammars/GLSL/GLSLPreParser.g4">
      <CustomToolNamespace>HereticalSolutions.HereticalEngine.Grammars</CustomToolNamespace>
      <Listener>False</Listener>
      <Visitor>True</Visitor>
    </Antlr4>

    <Antlr4 Include="Engine/Grammars/GLSL/GLSLParser.g4">
      <CustomToolNamespace>HereticalSolutions.HereticalEngine.Grammars</CustomToolNamespace>
      <Listener>False</Listener>
      <Visitor>True</Visitor>
    </Antlr4>
  </ItemGroup>
  -->

</Project>
