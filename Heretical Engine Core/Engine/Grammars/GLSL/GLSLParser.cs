//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /SSD1/Repositories/C#/Heretical Engine/Heretical Engine Core/Engine/Grammars/GLSL/GLSLParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HereticalSolutions.HereticalEngine.Grammars {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GLSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ATOMIC_UINT=1, ATTRIBUTE=2, BOOL=3, BREAK=4, BUFFER=5, BVEC2=6, BVEC3=7, 
		BVEC4=8, CASE=9, CENTROID=10, COHERENT=11, CONST=12, CONTINUE=13, DEFAULT=14, 
		DISCARD=15, DMAT2=16, DMAT2X2=17, DMAT2X3=18, DMAT2X4=19, DMAT3=20, DMAT3X2=21, 
		DMAT3X3=22, DMAT3X4=23, DMAT4=24, DMAT4X2=25, DMAT4X3=26, DMAT4X4=27, 
		DO=28, DOUBLE=29, DVEC2=30, DVEC3=31, DVEC4=32, ELSE=33, FALSE=34, FLAT=35, 
		FLOAT=36, FOR=37, HIGHP=38, IF=39, IIMAGE1D=40, IIMAGE1DARRAY=41, IIMAGE2D=42, 
		IIMAGE2DARRAY=43, IIMAGE2DMS=44, IIMAGE2DMSARRAY=45, IIMAGE2DRECT=46, 
		IIMAGE3D=47, IIMAGEBUFFER=48, IIMAGECUBE=49, IIMAGECUBEARRAY=50, IMAGE1D=51, 
		IMAGE1DARRAY=52, IMAGE2D=53, IMAGE2DARRAY=54, IMAGE2DMS=55, IMAGE2DMSARRAY=56, 
		IMAGE2DRECT=57, IMAGE3D=58, IMAGEBUFFER=59, IMAGECUBE=60, IMAGECUBEARRAY=61, 
		IN=62, INOUT=63, INT=64, INVARIANT=65, ISAMPLER1D=66, ISAMPLER1DARRAY=67, 
		ISAMPLER2D=68, ISAMPLER2DARRAY=69, ISAMPLER2DMS=70, ISAMPLER2DMSARRAY=71, 
		ISAMPLER2DRECT=72, ISAMPLER3D=73, ISAMPLERBUFFER=74, ISAMPLERCUBE=75, 
		ISAMPLERCUBEARRAY=76, ISUBPASSINPUT=77, ISUBPASSINPUTMS=78, ITEXTURE1D=79, 
		ITEXTURE1DARRAY=80, ITEXTURE2D=81, ITEXTURE2DARRAY=82, ITEXTURE2DMS=83, 
		ITEXTURE2DMSARRAY=84, ITEXTURE2DRECT=85, ITEXTURE3D=86, ITEXTUREBUFFER=87, 
		ITEXTURECUBE=88, ITEXTURECUBEARRAY=89, IVEC2=90, IVEC3=91, IVEC4=92, LAYOUT=93, 
		LOWP=94, MAT2=95, MAT2X2=96, MAT2X3=97, MAT2X4=98, MAT3=99, MAT3X2=100, 
		MAT3X3=101, MAT3X4=102, MAT4=103, MAT4X2=104, MAT4X3=105, MAT4X4=106, 
		MEDIUMP=107, NOPERSPECTIVE=108, OUT=109, PATCH=110, PRECISE=111, PRECISION=112, 
		READONLY=113, RESTRICT=114, RETURN=115, SAMPLE=116, SAMPLER=117, SAMPLER1D=118, 
		SAMPLER1DARRAY=119, SAMPLER1DARRAYSHADOW=120, SAMPLER1DSHADOW=121, SAMPLER2D=122, 
		SAMPLER2DARRAY=123, SAMPLER2DARRAYSHADOW=124, SAMPLER2DMS=125, SAMPLER2DMSARRAY=126, 
		SAMPLER2DRECT=127, SAMPLER2DRECTSHADOW=128, SAMPLER2DSHADOW=129, SAMPLER3D=130, 
		SAMPLERBUFFER=131, SAMPLERCUBE=132, SAMPLERCUBEARRAY=133, SAMPLERCUBEARRAYSHADOW=134, 
		SAMPLERCUBESHADOW=135, SAMPLERSHADOW=136, SHARED=137, SMOOTH=138, STRUCT=139, 
		SUBPASSINPUT=140, SUBPASSINPUTMS=141, SUBROUTINE=142, SWITCH=143, TEXTURE1D=144, 
		TEXTURE1DARRAY=145, TEXTURE2D=146, TEXTURE2DARRAY=147, TEXTURE2DMS=148, 
		TEXTURE2DMSARRAY=149, TEXTURE2DRECT=150, TEXTURE3D=151, TEXTUREBUFFER=152, 
		TEXTURECUBE=153, TEXTURECUBEARRAY=154, TRUE=155, UIMAGE1D=156, UIMAGE1DARRAY=157, 
		UIMAGE2D=158, UIMAGE2DARRAY=159, UIMAGE2DMS=160, UIMAGE2DMSARRAY=161, 
		UIMAGE2DRECT=162, UIMAGE3D=163, UIMAGEBUFFER=164, UIMAGECUBE=165, UIMAGECUBEARRAY=166, 
		UINT=167, UNIFORM=168, USAMPLER1D=169, USAMPLER1DARRAY=170, USAMPLER2D=171, 
		USAMPLER2DARRAY=172, USAMPLER2DMS=173, USAMPLER2DMSARRAY=174, USAMPLER2DRECT=175, 
		USAMPLER3D=176, USAMPLERBUFFER=177, USAMPLERCUBE=178, USAMPLERCUBEARRAY=179, 
		USUBPASSINPUT=180, USUBPASSINPUTMS=181, UTEXTURE1D=182, UTEXTURE1DARRAY=183, 
		UTEXTURE2D=184, UTEXTURE2DARRAY=185, UTEXTURE2DMS=186, UTEXTURE2DMSARRAY=187, 
		UTEXTURE2DRECT=188, UTEXTURE3D=189, UTEXTUREBUFFER=190, UTEXTURECUBE=191, 
		UTEXTURECUBEARRAY=192, UVEC2=193, UVEC3=194, UVEC4=195, VARYING=196, VEC2=197, 
		VEC3=198, VEC4=199, VOID=200, VOLATILE=201, WHILE=202, WRITEONLY=203, 
		ADD_ASSIGN=204, AMPERSAND=205, AND_ASSIGN=206, AND_OP=207, BANG=208, CARET=209, 
		COLON=210, COMMA=211, DASH=212, DEC_OP=213, DIV_ASSIGN=214, DOT=215, EQ_OP=216, 
		EQUAL=217, GE_OP=218, INC_OP=219, LE_OP=220, LEFT_ANGLE=221, LEFT_ASSIGN=222, 
		LEFT_BRACE=223, LEFT_BRACKET=224, LEFT_OP=225, LEFT_PAREN=226, MOD_ASSIGN=227, 
		MUL_ASSIGN=228, NE_OP=229, NUMBER_SIGN=230, OR_ASSIGN=231, OR_OP=232, 
		PERCENT=233, PLUS=234, QUESTION=235, RIGHT_ANGLE=236, RIGHT_ASSIGN=237, 
		RIGHT_BRACE=238, RIGHT_BRACKET=239, RIGHT_OP=240, RIGHT_PAREN=241, SEMICOLON=242, 
		SLASH=243, STAR=244, SUB_ASSIGN=245, TILDE=246, VERTICAL_BAR=247, XOR_ASSIGN=248, 
		XOR_OP=249, DOUBLECONSTANT=250, FLOATCONSTANT=251, INTCONSTANT=252, UINTCONSTANT=253, 
		BLOCK_COMMENT=254, LINE_COMMENT=255, LINE_CONTINUATION=256, IDENTIFIER=257, 
		WHITE_SPACE=258, DEFINE_DIRECTIVE=259, ELIF_DIRECTIVE=260, ELSE_DIRECTIVE=261, 
		ENDIF_DIRECTIVE=262, ERROR_DIRECTIVE=263, EXTENSION_DIRECTIVE=264, IF_DIRECTIVE=265, 
		IFDEF_DIRECTIVE=266, IFNDEF_DIRECTIVE=267, LINE_DIRECTIVE=268, PRAGMA_DIRECTIVE=269, 
		UNDEF_DIRECTIVE=270, VERSION_DIRECTIVE=271, SPACE_TAB_0=272, NEWLINE_0=273, 
		MACRO_NAME=274, NEWLINE_1=275, SPACE_TAB_1=276, CONSTANT_EXPRESSION=277, 
		NEWLINE_2=278, ERROR_MESSAGE=279, NEWLINE_3=280, BEHAVIOR=281, EXTENSION_NAME=282, 
		NEWLINE_4=283, SPACE_TAB_2=284, NEWLINE_5=285, MACRO_IDENTIFIER=286, NEWLINE_6=287, 
		SPACE_TAB_3=288, LINE_EXPRESSION=289, NEWLINE_7=290, MACRO_ESC_NEWLINE=291, 
		MACRO_TEXT=292, NEWLINE_8=293, DEBUG=294, NEWLINE_9=295, OFF=296, ON=297, 
		OPTIMIZE=298, SPACE_TAB_5=299, STDGL=300, PROGRAM_TEXT=301, NEWLINE_10=302, 
		SPACE_TAB_6=303, NEWLINE_11=304, NUMBER=305, PROFILE=306, SPACE_TAB_7=307;
	public const int
		RULE_translation_unit = 0, RULE_variable_identifier = 1, RULE_primary_expression = 2, 
		RULE_postfix_expression = 3, RULE_field_selection = 4, RULE_integer_expression = 5, 
		RULE_function_call = 6, RULE_function_identifier = 7, RULE_function_call_parameters = 8, 
		RULE_unary_expression = 9, RULE_unary_operator = 10, RULE_assignment_expression = 11, 
		RULE_assignment_operator = 12, RULE_binary_expression = 13, RULE_expression = 14, 
		RULE_constant_expression = 15, RULE_declaration = 16, RULE_identifier_list = 17, 
		RULE_function_prototype = 18, RULE_function_parameters = 19, RULE_parameter_declarator = 20, 
		RULE_parameter_declaration = 21, RULE_parameter_type_specifier = 22, RULE_init_declarator_list = 23, 
		RULE_single_declaration = 24, RULE_typeless_declaration = 25, RULE_fully_specified_type = 26, 
		RULE_invariant_qualifier = 27, RULE_interpolation_qualifier = 28, RULE_layout_qualifier = 29, 
		RULE_layout_qualifier_id_list = 30, RULE_layout_qualifier_id = 31, RULE_precise_qualifier = 32, 
		RULE_type_qualifier = 33, RULE_single_type_qualifier = 34, RULE_storage_qualifier = 35, 
		RULE_type_name_list = 36, RULE_type_name = 37, RULE_type_specifier = 38, 
		RULE_array_specifier = 39, RULE_dimension = 40, RULE_type_specifier_nonarray = 41, 
		RULE_precision_qualifier = 42, RULE_struct_specifier = 43, RULE_struct_declaration_list = 44, 
		RULE_struct_declaration = 45, RULE_struct_declarator_list = 46, RULE_struct_declarator = 47, 
		RULE_initializer = 48, RULE_initializer_list = 49, RULE_declaration_statement = 50, 
		RULE_statement = 51, RULE_simple_statement = 52, RULE_compound_statement = 53, 
		RULE_statement_no_new_scope = 54, RULE_compound_statement_no_new_scope = 55, 
		RULE_statement_list = 56, RULE_expression_statement = 57, RULE_selection_statement = 58, 
		RULE_selection_rest_statement = 59, RULE_condition = 60, RULE_switch_statement = 61, 
		RULE_case_label = 62, RULE_iteration_statement = 63, RULE_for_init_statement = 64, 
		RULE_for_rest_statement = 65, RULE_jump_statement = 66, RULE_external_declaration = 67, 
		RULE_function_definition = 68;
	public static readonly string[] ruleNames = {
		"translation_unit", "variable_identifier", "primary_expression", "postfix_expression", 
		"field_selection", "integer_expression", "function_call", "function_identifier", 
		"function_call_parameters", "unary_expression", "unary_operator", "assignment_expression", 
		"assignment_operator", "binary_expression", "expression", "constant_expression", 
		"declaration", "identifier_list", "function_prototype", "function_parameters", 
		"parameter_declarator", "parameter_declaration", "parameter_type_specifier", 
		"init_declarator_list", "single_declaration", "typeless_declaration", 
		"fully_specified_type", "invariant_qualifier", "interpolation_qualifier", 
		"layout_qualifier", "layout_qualifier_id_list", "layout_qualifier_id", 
		"precise_qualifier", "type_qualifier", "single_type_qualifier", "storage_qualifier", 
		"type_name_list", "type_name", "type_specifier", "array_specifier", "dimension", 
		"type_specifier_nonarray", "precision_qualifier", "struct_specifier", 
		"struct_declaration_list", "struct_declaration", "struct_declarator_list", 
		"struct_declarator", "initializer", "initializer_list", "declaration_statement", 
		"statement", "simple_statement", "compound_statement", "statement_no_new_scope", 
		"compound_statement_no_new_scope", "statement_list", "expression_statement", 
		"selection_statement", "selection_rest_statement", "condition", "switch_statement", 
		"case_label", "iteration_statement", "for_init_statement", "for_rest_statement", 
		"jump_statement", "external_declaration", "function_definition"
	};

	private static readonly string[] _LiteralNames = {
		null, "'atomic_uint'", "'attribute'", "'bool'", "'break'", "'buffer'", 
		"'bvec2'", "'bvec3'", "'bvec4'", "'case'", "'centroid'", "'coherent'", 
		"'const'", "'continue'", "'default'", "'discard'", "'dmat2'", "'dmat2x2'", 
		"'dmat2x3'", "'dmat2x4'", "'dmat3'", "'dmat3x2'", "'dmat3x3'", "'dmat3x4'", 
		"'dmat4'", "'dmat4x2'", "'dmat4x3'", "'dmat4x4'", "'do'", "'double'", 
		"'dvec2'", "'dvec3'", "'dvec4'", "'else'", "'false'", "'flat'", "'float'", 
		"'for'", "'highp'", "'if'", "'iimage1D'", "'iimage1DArray'", "'iimage2D'", 
		"'iimage2DArray'", "'iimage2DMS'", "'iimage2DMSArray'", "'iimage2DRect'", 
		"'iimage3D'", "'iimageBuffer'", "'iimageCube'", "'iimageCubeArray'", "'image1D'", 
		"'image1DArray'", "'image2D'", "'image2DArray'", "'image2DMS'", "'image2DMSArray'", 
		"'image2DRect'", "'image3D'", "'imageBuffer'", "'imageCube'", "'imageCubeArray'", 
		"'in'", "'inout'", "'int'", "'invariant'", "'isampler1D'", "'isampler1DArray'", 
		"'isampler2D'", "'isampler2DArray'", "'isampler2DMS'", "'isampler2DMSArray'", 
		"'isampler2DRect'", "'isampler3D'", "'isamplerBuffer'", "'isamplerCube'", 
		"'isamplerCubeArray'", "'isubpassInput'", "'isubpassInputMS'", "'itexture1D'", 
		"'itexture1DArray'", "'itexture2D'", "'itexture2DArray'", "'itexture2DMS'", 
		"'itexture2DMSArray'", "'itexture2DRect'", "'itexture3D'", "'itextureBuffer'", 
		"'itextureCube'", "'itextureCubeArray'", "'ivec2'", "'ivec3'", "'ivec4'", 
		"'layout'", "'lowp'", "'mat2'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3'", 
		"'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4'", "'mat4x2'", "'mat4x3'", 
		"'mat4x4'", "'mediump'", "'noperspective'", "'out'", "'patch'", "'precise'", 
		"'precision'", "'readonly'", "'restrict'", "'return'", "'sample'", "'sampler'", 
		"'sampler1D'", "'sampler1DArray'", "'sampler1DArrayShadow'", "'sampler1DShadow'", 
		"'sampler2D'", "'sampler2DArray'", "'sampler2DArrayShadow'", "'sampler2DMS'", 
		"'sampler2DMSArray'", "'sampler2DRect'", "'sampler2DRectShadow'", "'sampler2DShadow'", 
		"'sampler3D'", "'samplerBuffer'", "'samplerCube'", "'samplerCubeArray'", 
		"'samplerCubeArrayShadow'", "'samplerCubeShadow'", "'samplerShadow'", 
		"'shared'", "'smooth'", "'struct'", "'subpassInput'", "'subpassInputMS'", 
		"'subroutine'", "'switch'", "'texture1D'", "'texture1DArray'", "'texture2D'", 
		"'texture2DArray'", "'texture2DMS'", "'texture2DMSArray'", "'texture2DRect'", 
		"'texture3D'", "'textureBuffer'", "'textureCube'", "'textureCubeArray'", 
		"'true'", "'uimage1D'", "'uimage1DArray'", "'uimage2D'", "'uimage2DArray'", 
		"'uimage2DMS'", "'uimage2DMSArray'", "'uimage2DRect'", "'uimage3D'", "'uimageBuffer'", 
		"'uimageCube'", "'uimageCubeArray'", "'uint'", "'uniform'", "'usampler1D'", 
		"'usampler1DArray'", "'usampler2D'", "'usampler2DArray'", "'usampler2DMS'", 
		"'usampler2DMSArray'", "'usampler2DRect'", "'usampler3D'", "'usamplerBuffer'", 
		"'usamplerCube'", "'usamplerCubeArray'", "'usubpassInput'", "'usubpassInputMS'", 
		"'utexture1D'", "'utexture1DArray'", "'utexture2D'", "'utexture2DArray'", 
		"'utexture2DMS'", "'utexture2DMSArray'", "'utexture2DRect'", "'utexture3D'", 
		"'utextureBuffer'", "'utextureCube'", "'utextureCubeArray'", "'uvec2'", 
		"'uvec3'", "'uvec4'", "'varying'", "'vec2'", "'vec3'", "'vec4'", "'void'", 
		"'volatile'", "'while'", "'writeonly'", "'+='", "'&'", "'&='", "'&&'", 
		"'!'", "'^'", "':'", "','", "'-'", "'--'", "'/='", "'.'", "'=='", "'='", 
		"'>='", "'++'", "'<='", "'<'", "'<<='", "'{'", "'['", "'<<'", "'('", "'%='", 
		"'*='", "'!='", null, "'|='", "'||'", "'%'", "'+'", "'?'", "'>'", "'>>='", 
		"'}'", "']'", "'>>'", "')'", "';'", "'/'", "'*'", "'-='", "'~'", "'|'", 
		"'^='", "'^^'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'debug'", 
		null, "'off'", "'on'", "'optimize'", null, "'STDGL'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ATOMIC_UINT", "ATTRIBUTE", "BOOL", "BREAK", "BUFFER", "BVEC2", 
		"BVEC3", "BVEC4", "CASE", "CENTROID", "COHERENT", "CONST", "CONTINUE", 
		"DEFAULT", "DISCARD", "DMAT2", "DMAT2X2", "DMAT2X3", "DMAT2X4", "DMAT3", 
		"DMAT3X2", "DMAT3X3", "DMAT3X4", "DMAT4", "DMAT4X2", "DMAT4X3", "DMAT4X4", 
		"DO", "DOUBLE", "DVEC2", "DVEC3", "DVEC4", "ELSE", "FALSE", "FLAT", "FLOAT", 
		"FOR", "HIGHP", "IF", "IIMAGE1D", "IIMAGE1DARRAY", "IIMAGE2D", "IIMAGE2DARRAY", 
		"IIMAGE2DMS", "IIMAGE2DMSARRAY", "IIMAGE2DRECT", "IIMAGE3D", "IIMAGEBUFFER", 
		"IIMAGECUBE", "IIMAGECUBEARRAY", "IMAGE1D", "IMAGE1DARRAY", "IMAGE2D", 
		"IMAGE2DARRAY", "IMAGE2DMS", "IMAGE2DMSARRAY", "IMAGE2DRECT", "IMAGE3D", 
		"IMAGEBUFFER", "IMAGECUBE", "IMAGECUBEARRAY", "IN", "INOUT", "INT", "INVARIANT", 
		"ISAMPLER1D", "ISAMPLER1DARRAY", "ISAMPLER2D", "ISAMPLER2DARRAY", "ISAMPLER2DMS", 
		"ISAMPLER2DMSARRAY", "ISAMPLER2DRECT", "ISAMPLER3D", "ISAMPLERBUFFER", 
		"ISAMPLERCUBE", "ISAMPLERCUBEARRAY", "ISUBPASSINPUT", "ISUBPASSINPUTMS", 
		"ITEXTURE1D", "ITEXTURE1DARRAY", "ITEXTURE2D", "ITEXTURE2DARRAY", "ITEXTURE2DMS", 
		"ITEXTURE2DMSARRAY", "ITEXTURE2DRECT", "ITEXTURE3D", "ITEXTUREBUFFER", 
		"ITEXTURECUBE", "ITEXTURECUBEARRAY", "IVEC2", "IVEC3", "IVEC4", "LAYOUT", 
		"LOWP", "MAT2", "MAT2X2", "MAT2X3", "MAT2X4", "MAT3", "MAT3X2", "MAT3X3", 
		"MAT3X4", "MAT4", "MAT4X2", "MAT4X3", "MAT4X4", "MEDIUMP", "NOPERSPECTIVE", 
		"OUT", "PATCH", "PRECISE", "PRECISION", "READONLY", "RESTRICT", "RETURN", 
		"SAMPLE", "SAMPLER", "SAMPLER1D", "SAMPLER1DARRAY", "SAMPLER1DARRAYSHADOW", 
		"SAMPLER1DSHADOW", "SAMPLER2D", "SAMPLER2DARRAY", "SAMPLER2DARRAYSHADOW", 
		"SAMPLER2DMS", "SAMPLER2DMSARRAY", "SAMPLER2DRECT", "SAMPLER2DRECTSHADOW", 
		"SAMPLER2DSHADOW", "SAMPLER3D", "SAMPLERBUFFER", "SAMPLERCUBE", "SAMPLERCUBEARRAY", 
		"SAMPLERCUBEARRAYSHADOW", "SAMPLERCUBESHADOW", "SAMPLERSHADOW", "SHARED", 
		"SMOOTH", "STRUCT", "SUBPASSINPUT", "SUBPASSINPUTMS", "SUBROUTINE", "SWITCH", 
		"TEXTURE1D", "TEXTURE1DARRAY", "TEXTURE2D", "TEXTURE2DARRAY", "TEXTURE2DMS", 
		"TEXTURE2DMSARRAY", "TEXTURE2DRECT", "TEXTURE3D", "TEXTUREBUFFER", "TEXTURECUBE", 
		"TEXTURECUBEARRAY", "TRUE", "UIMAGE1D", "UIMAGE1DARRAY", "UIMAGE2D", "UIMAGE2DARRAY", 
		"UIMAGE2DMS", "UIMAGE2DMSARRAY", "UIMAGE2DRECT", "UIMAGE3D", "UIMAGEBUFFER", 
		"UIMAGECUBE", "UIMAGECUBEARRAY", "UINT", "UNIFORM", "USAMPLER1D", "USAMPLER1DARRAY", 
		"USAMPLER2D", "USAMPLER2DARRAY", "USAMPLER2DMS", "USAMPLER2DMSARRAY", 
		"USAMPLER2DRECT", "USAMPLER3D", "USAMPLERBUFFER", "USAMPLERCUBE", "USAMPLERCUBEARRAY", 
		"USUBPASSINPUT", "USUBPASSINPUTMS", "UTEXTURE1D", "UTEXTURE1DARRAY", "UTEXTURE2D", 
		"UTEXTURE2DARRAY", "UTEXTURE2DMS", "UTEXTURE2DMSARRAY", "UTEXTURE2DRECT", 
		"UTEXTURE3D", "UTEXTUREBUFFER", "UTEXTURECUBE", "UTEXTURECUBEARRAY", "UVEC2", 
		"UVEC3", "UVEC4", "VARYING", "VEC2", "VEC3", "VEC4", "VOID", "VOLATILE", 
		"WHILE", "WRITEONLY", "ADD_ASSIGN", "AMPERSAND", "AND_ASSIGN", "AND_OP", 
		"BANG", "CARET", "COLON", "COMMA", "DASH", "DEC_OP", "DIV_ASSIGN", "DOT", 
		"EQ_OP", "EQUAL", "GE_OP", "INC_OP", "LE_OP", "LEFT_ANGLE", "LEFT_ASSIGN", 
		"LEFT_BRACE", "LEFT_BRACKET", "LEFT_OP", "LEFT_PAREN", "MOD_ASSIGN", "MUL_ASSIGN", 
		"NE_OP", "NUMBER_SIGN", "OR_ASSIGN", "OR_OP", "PERCENT", "PLUS", "QUESTION", 
		"RIGHT_ANGLE", "RIGHT_ASSIGN", "RIGHT_BRACE", "RIGHT_BRACKET", "RIGHT_OP", 
		"RIGHT_PAREN", "SEMICOLON", "SLASH", "STAR", "SUB_ASSIGN", "TILDE", "VERTICAL_BAR", 
		"XOR_ASSIGN", "XOR_OP", "DOUBLECONSTANT", "FLOATCONSTANT", "INTCONSTANT", 
		"UINTCONSTANT", "BLOCK_COMMENT", "LINE_COMMENT", "LINE_CONTINUATION", 
		"IDENTIFIER", "WHITE_SPACE", "DEFINE_DIRECTIVE", "ELIF_DIRECTIVE", "ELSE_DIRECTIVE", 
		"ENDIF_DIRECTIVE", "ERROR_DIRECTIVE", "EXTENSION_DIRECTIVE", "IF_DIRECTIVE", 
		"IFDEF_DIRECTIVE", "IFNDEF_DIRECTIVE", "LINE_DIRECTIVE", "PRAGMA_DIRECTIVE", 
		"UNDEF_DIRECTIVE", "VERSION_DIRECTIVE", "SPACE_TAB_0", "NEWLINE_0", "MACRO_NAME", 
		"NEWLINE_1", "SPACE_TAB_1", "CONSTANT_EXPRESSION", "NEWLINE_2", "ERROR_MESSAGE", 
		"NEWLINE_3", "BEHAVIOR", "EXTENSION_NAME", "NEWLINE_4", "SPACE_TAB_2", 
		"NEWLINE_5", "MACRO_IDENTIFIER", "NEWLINE_6", "SPACE_TAB_3", "LINE_EXPRESSION", 
		"NEWLINE_7", "MACRO_ESC_NEWLINE", "MACRO_TEXT", "NEWLINE_8", "DEBUG", 
		"NEWLINE_9", "OFF", "ON", "OPTIMIZE", "SPACE_TAB_5", "STDGL", "PROGRAM_TEXT", 
		"NEWLINE_10", "SPACE_TAB_6", "NEWLINE_11", "NUMBER", "PROFILE", "SPACE_TAB_7"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GLSLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GLSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GLSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GLSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Translation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GLSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public External_declarationContext[] external_declaration() {
			return GetRuleContexts<External_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_declarationContext external_declaration(int i) {
			return GetRuleContext<External_declarationContext>(i);
		}
		public Translation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Translation_unitContext translation_unit() {
		Translation_unitContext _localctx = new Translation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -713233064466L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -11258999135526913L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4503599358955263L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 562949953422847L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 138;
				external_declaration();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(GLSLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(GLSLParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTCONSTANT() { return GetToken(GLSLParser.INTCONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTCONSTANT() { return GetToken(GLSLParser.UINTCONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATCONSTANT() { return GetToken(GLSLParser.FLOATCONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECONSTANT() { return GetToken(GLSLParser.DOUBLECONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_primary_expression);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				variable_identifier();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				Match(FALSE);
				}
				break;
			case INTCONSTANT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 151;
				Match(INTCONSTANT);
				}
				break;
			case UINTCONSTANT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152;
				Match(UINTCONSTANT);
				}
				break;
			case FLOATCONSTANT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 153;
				Match(FLOATCONSTANT);
				}
				break;
			case DOUBLECONSTANT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 154;
				Match(DOUBLECONSTANT);
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 155;
				Match(LEFT_PAREN);
				State = 156;
				expression(0);
				State = 157;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_parametersContext function_call_parameters() {
			return GetRuleContext<Function_call_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(GLSLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_expressionContext integer_expression() {
			return GetRuleContext<Integer_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(GLSLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GLSLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_selectionContext field_selection() {
			return GetRuleContext<Field_selectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_OP() { return GetToken(GLSLParser.INC_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_OP() { return GetToken(GLSLParser.DEC_OP, 0); }
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		return postfix_expression(0);
	}

	private Postfix_expressionContext postfix_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, _parentState);
		Postfix_expressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_postfix_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 162;
				primary_expression();
				}
				break;
			case 2:
				{
				State = 163;
				type_specifier();
				State = 164;
				Match(LEFT_PAREN);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -6917529530286505755L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -4501401023543297L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -9222246411859393985L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & -8138003422817533829L) != 0)) {
					{
					State = 165;
					function_call_parameters();
					}
				}

				State = 168;
				Match(RIGHT_PAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 190;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 172;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 173;
						Match(LEFT_BRACKET);
						State = 174;
						integer_expression();
						State = 175;
						Match(RIGHT_BRACKET);
						}
						break;
					case 2:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 177;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 178;
						Match(LEFT_PAREN);
						State = 180;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -6917529530286505755L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -4501401023543297L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -9222246411859393985L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & -8138003422817533829L) != 0)) {
							{
							State = 179;
							function_call_parameters();
							}
						}

						State = 182;
						Match(RIGHT_PAREN);
						}
						break;
					case 3:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 183;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 184;
						Match(DOT);
						State = 185;
						field_selection();
						}
						break;
					case 4:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 186;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 187;
						Match(INC_OP);
						}
						break;
					case 5:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 188;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 189;
						Match(DEC_OP);
						}
						break;
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Field_selectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Field_selectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_selection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_selection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_selectionContext field_selection() {
		Field_selectionContext _localctx = new Field_selectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_field_selection);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				variable_identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Integer_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_expressionContext integer_expression() {
		Integer_expressionContext _localctx = new Integer_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_integer_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_identifierContext function_identifier() {
			return GetRuleContext<Function_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_parametersContext function_call_parameters() {
			return GetRuleContext<Function_call_parametersContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			function_identifier();
			State = 202;
			Match(LEFT_PAREN);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -6917529530286505755L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -4501401023543297L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -9222246411859393985L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & -8138003422817533829L) != 0)) {
				{
				State = 203;
				function_call_parameters();
				}
			}

			State = 206;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Function_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_identifierContext function_identifier() {
		Function_identifierContext _localctx = new Function_identifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_identifier);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				type_specifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				postfix_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext[] assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GLSLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GLSLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(GLSLParser.VOID, 0); }
		public Function_call_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_parametersContext function_call_parameters() {
		Function_call_parametersContext _localctx = new Function_call_parametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_call_parameters);
		int _la;
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				assignment_expression();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 213;
					Match(COMMA);
					State = 214;
					assignment_expression();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220;
				Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_OP() { return GetToken(GLSLParser.INC_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_OP() { return GetToken(GLSLParser.DEC_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_unary_expression);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATOMIC_UINT:
			case BOOL:
			case BVEC2:
			case BVEC3:
			case BVEC4:
			case DMAT2:
			case DMAT2X2:
			case DMAT2X3:
			case DMAT2X4:
			case DMAT3:
			case DMAT3X2:
			case DMAT3X3:
			case DMAT3X4:
			case DMAT4:
			case DMAT4X2:
			case DMAT4X3:
			case DMAT4X4:
			case DOUBLE:
			case DVEC2:
			case DVEC3:
			case DVEC4:
			case FALSE:
			case FLOAT:
			case IIMAGE1D:
			case IIMAGE1DARRAY:
			case IIMAGE2D:
			case IIMAGE2DARRAY:
			case IIMAGE2DMS:
			case IIMAGE2DMSARRAY:
			case IIMAGE2DRECT:
			case IIMAGE3D:
			case IIMAGEBUFFER:
			case IIMAGECUBE:
			case IIMAGECUBEARRAY:
			case IMAGE1D:
			case IMAGE1DARRAY:
			case IMAGE2D:
			case IMAGE2DARRAY:
			case IMAGE2DMS:
			case IMAGE2DMSARRAY:
			case IMAGE2DRECT:
			case IMAGE3D:
			case IMAGEBUFFER:
			case IMAGECUBE:
			case IMAGECUBEARRAY:
			case INT:
			case ISAMPLER1D:
			case ISAMPLER1DARRAY:
			case ISAMPLER2D:
			case ISAMPLER2DARRAY:
			case ISAMPLER2DMS:
			case ISAMPLER2DMSARRAY:
			case ISAMPLER2DRECT:
			case ISAMPLER3D:
			case ISAMPLERBUFFER:
			case ISAMPLERCUBE:
			case ISAMPLERCUBEARRAY:
			case IVEC2:
			case IVEC3:
			case IVEC4:
			case MAT2:
			case MAT2X2:
			case MAT2X3:
			case MAT2X4:
			case MAT3:
			case MAT3X2:
			case MAT3X3:
			case MAT3X4:
			case MAT4:
			case MAT4X2:
			case MAT4X3:
			case MAT4X4:
			case SAMPLER1D:
			case SAMPLER1DARRAY:
			case SAMPLER1DARRAYSHADOW:
			case SAMPLER1DSHADOW:
			case SAMPLER2D:
			case SAMPLER2DARRAY:
			case SAMPLER2DARRAYSHADOW:
			case SAMPLER2DMS:
			case SAMPLER2DMSARRAY:
			case SAMPLER2DRECT:
			case SAMPLER2DRECTSHADOW:
			case SAMPLER2DSHADOW:
			case SAMPLER3D:
			case SAMPLERBUFFER:
			case SAMPLERCUBE:
			case SAMPLERCUBEARRAY:
			case SAMPLERCUBEARRAYSHADOW:
			case SAMPLERCUBESHADOW:
			case STRUCT:
			case TRUE:
			case UIMAGE1D:
			case UIMAGE1DARRAY:
			case UIMAGE2D:
			case UIMAGE2DARRAY:
			case UIMAGE2DMS:
			case UIMAGE2DMSARRAY:
			case UIMAGE2DRECT:
			case UIMAGE3D:
			case UIMAGEBUFFER:
			case UIMAGECUBE:
			case UIMAGECUBEARRAY:
			case UINT:
			case USAMPLER1D:
			case USAMPLER1DARRAY:
			case USAMPLER2D:
			case USAMPLER2DARRAY:
			case USAMPLER2DMS:
			case USAMPLER2DMSARRAY:
			case USAMPLER2DRECT:
			case USAMPLER3D:
			case USAMPLERBUFFER:
			case USAMPLERCUBE:
			case USAMPLERCUBEARRAY:
			case UVEC2:
			case UVEC3:
			case UVEC4:
			case VEC2:
			case VEC3:
			case VEC4:
			case VOID:
			case LEFT_PAREN:
			case DOUBLECONSTANT:
			case FLOATCONSTANT:
			case INTCONSTANT:
			case UINTCONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				postfix_expression(0);
				}
				break;
			case INC_OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				Match(INC_OP);
				State = 225;
				unary_expression();
				}
				break;
			case DEC_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226;
				Match(DEC_OP);
				State = 227;
				unary_expression();
				}
				break;
			case BANG:
			case DASH:
			case PLUS:
			case TILDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 228;
				unary_operator();
				State = 229;
				unary_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GLSLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(GLSLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(GLSLParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(GLSLParser.TILDE, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 20, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & 274945015825L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment_expression);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				constant_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				unary_expression();
				State = 237;
				assignment_operator();
				State = 238;
				assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(GLSLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(GLSLParser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(GLSLParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(GLSLParser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(GLSLParser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(GLSLParser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ASSIGN() { return GetToken(GLSLParser.LEFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ASSIGN() { return GetToken(GLSLParser.RIGHT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(GLSLParser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(GLSLParser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(GLSLParser.OR_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & 19799958889477L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_expressionContext[] binary_expression() {
			return GetRuleContexts<Binary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_expressionContext binary_expression(int i) {
			return GetRuleContext<Binary_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GLSLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(GLSLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(GLSLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GLSLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(GLSLParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_OP() { return GetToken(GLSLParser.LEFT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_OP() { return GetToken(GLSLParser.RIGHT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE() { return GetToken(GLSLParser.LEFT_ANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE() { return GetToken(GLSLParser.RIGHT_ANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE_OP() { return GetToken(GLSLParser.LE_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE_OP() { return GetToken(GLSLParser.GE_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(GLSLParser.EQ_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE_OP() { return GetToken(GLSLParser.NE_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(GLSLParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(GLSLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERTICAL_BAR() { return GetToken(GLSLParser.VERTICAL_BAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(GLSLParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_OP() { return GetToken(GLSLParser.XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(GLSLParser.OR_OP, 0); }
		public Binary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_expressionContext binary_expression() {
		return binary_expression(0);
	}

	private Binary_expressionContext binary_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Binary_expressionContext _localctx = new Binary_expressionContext(Context, _parentState);
		Binary_expressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_binary_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 245;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 280;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 247;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 248;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & 3073L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 249;
						binary_expression(12);
						}
						break;
					case 2:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 250;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 251;
						_la = TokenStream.LA(1);
						if ( !(_la==DASH || _la==PLUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 252;
						binary_expression(11);
						}
						break;
					case 3:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 253;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 254;
						_la = TokenStream.LA(1);
						if ( !(_la==LEFT_OP || _la==RIGHT_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 255;
						binary_expression(10);
						}
						break;
					case 4:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 256;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 257;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & 262157L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 258;
						binary_expression(9);
						}
						break;
					case 5:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 259;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 260;
						_la = TokenStream.LA(1);
						if ( !(_la==EQ_OP || _la==NE_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 261;
						binary_expression(8);
						}
						break;
					case 6:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 262;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 263;
						Match(AMPERSAND);
						State = 264;
						binary_expression(7);
						}
						break;
					case 7:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 265;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 266;
						Match(CARET);
						State = 267;
						binary_expression(6);
						}
						break;
					case 8:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 268;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 269;
						Match(VERTICAL_BAR);
						State = 270;
						binary_expression(5);
						}
						break;
					case 9:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 271;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 272;
						Match(AND_OP);
						State = 273;
						binary_expression(4);
						}
						break;
					case 10:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 274;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 275;
						Match(XOR_OP);
						State = 276;
						binary_expression(3);
						}
						break;
					case 11:
						{
						_localctx = new Binary_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						State = 277;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 278;
						Match(OR_OP);
						State = 279;
						binary_expression(2);
						}
						break;
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GLSLParser.COMMA, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 286;
			assignment_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 293;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 288;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 289;
					Match(COMMA);
					State = 290;
					assignment_expression();
					}
					} 
				}
				State = 295;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binary_expressionContext binary_expression() {
			return GetRuleContext<Binary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(GLSLParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GLSLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_constant_expression);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				binary_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				binary_expression(0);
				State = 298;
				Match(QUESTION);
				State = 299;
				expression(0);
				State = 300;
				Match(COLON);
				State = 301;
				assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_prototypeContext function_prototype() {
			return GetRuleContext<Function_prototypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GLSLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_declarator_listContext init_declarator_list() {
			return GetRuleContext<Init_declarator_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(GLSLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Precision_qualifierContext precision_qualifier() {
			return GetRuleContext<Precision_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_qualifierContext type_qualifier() {
			return GetRuleContext<Type_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GLSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GLSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(GLSLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_listContext struct_declaration_list() {
			return GetRuleContext<Struct_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(GLSLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specifierContext array_specifier() {
			return GetRuleContext<Array_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_declaration);
		int _la;
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				function_prototype();
				State = 306;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				init_declarator_list();
				State = 309;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311;
				Match(PRECISION);
				State = 312;
				precision_qualifier();
				State = 313;
				type_specifier();
				State = 314;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 316;
				type_qualifier();
				State = 317;
				Match(IDENTIFIER);
				State = 318;
				Match(LEFT_BRACE);
				State = 319;
				struct_declaration_list();
				State = 320;
				Match(RIGHT_BRACE);
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 321;
					Match(IDENTIFIER);
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LEFT_BRACKET) {
						{
						State = 322;
						array_specifier();
						}
					}

					}
				}

				State = 327;
				Match(SEMICOLON);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 329;
				type_qualifier();
				State = 331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 330;
					identifier_list();
					}
				}

				State = 333;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GLSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GLSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GLSLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GLSLParser.COMMA, i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_listContext identifier_list() {
		Identifier_listContext _localctx = new Identifier_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(IDENTIFIER);
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 338;
				Match(COMMA);
				State = 339;
				Match(IDENTIFIER);
				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_prototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fully_specified_typeContext fully_specified_type() {
			return GetRuleContext<Fully_specified_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		public Function_prototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_prototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_prototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_prototypeContext function_prototype() {
		Function_prototypeContext _localctx = new Function_prototypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_function_prototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			fully_specified_type();
			State = 346;
			Match(IDENTIFIER);
			State = 347;
			Match(LEFT_PAREN);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -713233064466L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -11540474112237569L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4503599358955263L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 1535L) != 0) || _la==IDENTIFIER) {
				{
				State = 348;
				function_parameters();
				}
			}

			State = 351;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declarationContext[] parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GLSLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GLSLParser.COMMA, i);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parametersContext function_parameters() {
		Function_parametersContext _localctx = new Function_parametersContext(Context, State);
		EnterRule(_localctx, 38, RULE_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			parameter_declaration();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 354;
				Match(COMMA);
				State = 355;
				parameter_declaration();
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specifierContext array_specifier() {
			return GetRuleContext<Array_specifierContext>(0);
		}
		public Parameter_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declaratorContext parameter_declarator() {
		Parameter_declaratorContext _localctx = new Parameter_declaratorContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			type_specifier();
			State = 362;
			Match(IDENTIFIER);
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 363;
				array_specifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_qualifierContext type_qualifier() {
			return GetRuleContext<Type_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declaratorContext parameter_declarator() {
			return GetRuleContext<Parameter_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_type_specifierContext parameter_type_specifier() {
			return GetRuleContext<Parameter_type_specifierContext>(0);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameter_declaration);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366;
				type_qualifier();
				State = 369;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 367;
					parameter_declarator();
					}
					break;
				case 2:
					{
					State = 368;
					parameter_type_specifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				parameter_declarator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 372;
				parameter_type_specifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_type_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public Parameter_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_type_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_type_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_type_specifierContext parameter_type_specifier() {
		Parameter_type_specifierContext _localctx = new Parameter_type_specifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameter_type_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			type_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_declarationContext single_declaration() {
			return GetRuleContext<Single_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GLSLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GLSLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typeless_declarationContext[] typeless_declaration() {
			return GetRuleContexts<Typeless_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typeless_declarationContext typeless_declaration(int i) {
			return GetRuleContext<Typeless_declarationContext>(i);
		}
		public Init_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_declarator_listContext init_declarator_list() {
		Init_declarator_listContext _localctx = new Init_declarator_listContext(Context, State);
		EnterRule(_localctx, 46, RULE_init_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			single_declaration();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 378;
				Match(COMMA);
				State = 379;
				typeless_declaration();
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fully_specified_typeContext fully_specified_type() {
			return GetRuleContext<Fully_specified_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typeless_declarationContext typeless_declaration() {
			return GetRuleContext<Typeless_declarationContext>(0);
		}
		public Single_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_declarationContext single_declaration() {
		Single_declarationContext _localctx = new Single_declarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_single_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			fully_specified_type();
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 386;
				typeless_declaration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typeless_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specifierContext array_specifier() {
			return GetRuleContext<Array_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(GLSLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public Typeless_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeless_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeless_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typeless_declarationContext typeless_declaration() {
		Typeless_declarationContext _localctx = new Typeless_declarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_typeless_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(IDENTIFIER);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 390;
				array_specifier();
				}
			}

			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 393;
				Match(EQUAL);
				State = 394;
				initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fully_specified_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_qualifierContext type_qualifier() {
			return GetRuleContext<Type_qualifierContext>(0);
		}
		public Fully_specified_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fully_specified_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFully_specified_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fully_specified_typeContext fully_specified_type() {
		Fully_specified_typeContext _localctx = new Fully_specified_typeContext(Context, State);
		EnterRule(_localctx, 52, RULE_fully_specified_type);
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATOMIC_UINT:
			case BOOL:
			case BVEC2:
			case BVEC3:
			case BVEC4:
			case DMAT2:
			case DMAT2X2:
			case DMAT2X3:
			case DMAT2X4:
			case DMAT3:
			case DMAT3X2:
			case DMAT3X3:
			case DMAT3X4:
			case DMAT4:
			case DMAT4X2:
			case DMAT4X3:
			case DMAT4X4:
			case DOUBLE:
			case DVEC2:
			case DVEC3:
			case DVEC4:
			case FLOAT:
			case IIMAGE1D:
			case IIMAGE1DARRAY:
			case IIMAGE2D:
			case IIMAGE2DARRAY:
			case IIMAGE2DMS:
			case IIMAGE2DMSARRAY:
			case IIMAGE2DRECT:
			case IIMAGE3D:
			case IIMAGEBUFFER:
			case IIMAGECUBE:
			case IIMAGECUBEARRAY:
			case IMAGE1D:
			case IMAGE1DARRAY:
			case IMAGE2D:
			case IMAGE2DARRAY:
			case IMAGE2DMS:
			case IMAGE2DMSARRAY:
			case IMAGE2DRECT:
			case IMAGE3D:
			case IMAGEBUFFER:
			case IMAGECUBE:
			case IMAGECUBEARRAY:
			case INT:
			case ISAMPLER1D:
			case ISAMPLER1DARRAY:
			case ISAMPLER2D:
			case ISAMPLER2DARRAY:
			case ISAMPLER2DMS:
			case ISAMPLER2DMSARRAY:
			case ISAMPLER2DRECT:
			case ISAMPLER3D:
			case ISAMPLERBUFFER:
			case ISAMPLERCUBE:
			case ISAMPLERCUBEARRAY:
			case IVEC2:
			case IVEC3:
			case IVEC4:
			case MAT2:
			case MAT2X2:
			case MAT2X3:
			case MAT2X4:
			case MAT3:
			case MAT3X2:
			case MAT3X3:
			case MAT3X4:
			case MAT4:
			case MAT4X2:
			case MAT4X3:
			case MAT4X4:
			case SAMPLER1D:
			case SAMPLER1DARRAY:
			case SAMPLER1DARRAYSHADOW:
			case SAMPLER1DSHADOW:
			case SAMPLER2D:
			case SAMPLER2DARRAY:
			case SAMPLER2DARRAYSHADOW:
			case SAMPLER2DMS:
			case SAMPLER2DMSARRAY:
			case SAMPLER2DRECT:
			case SAMPLER2DRECTSHADOW:
			case SAMPLER2DSHADOW:
			case SAMPLER3D:
			case SAMPLERBUFFER:
			case SAMPLERCUBE:
			case SAMPLERCUBEARRAY:
			case SAMPLERCUBEARRAYSHADOW:
			case SAMPLERCUBESHADOW:
			case STRUCT:
			case UIMAGE1D:
			case UIMAGE1DARRAY:
			case UIMAGE2D:
			case UIMAGE2DARRAY:
			case UIMAGE2DMS:
			case UIMAGE2DMSARRAY:
			case UIMAGE2DRECT:
			case UIMAGE3D:
			case UIMAGEBUFFER:
			case UIMAGECUBE:
			case UIMAGECUBEARRAY:
			case UINT:
			case USAMPLER1D:
			case USAMPLER1DARRAY:
			case USAMPLER2D:
			case USAMPLER2DARRAY:
			case USAMPLER2DMS:
			case USAMPLER2DMSARRAY:
			case USAMPLER2DRECT:
			case USAMPLER3D:
			case USAMPLERBUFFER:
			case USAMPLERCUBE:
			case USAMPLERCUBEARRAY:
			case UVEC2:
			case UVEC3:
			case UVEC4:
			case VEC2:
			case VEC3:
			case VEC4:
			case VOID:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 397;
				type_specifier();
				}
				break;
			case ATTRIBUTE:
			case BUFFER:
			case CENTROID:
			case COHERENT:
			case CONST:
			case FLAT:
			case HIGHP:
			case IN:
			case INOUT:
			case INVARIANT:
			case LAYOUT:
			case LOWP:
			case MEDIUMP:
			case NOPERSPECTIVE:
			case OUT:
			case PATCH:
			case PRECISE:
			case READONLY:
			case RESTRICT:
			case SAMPLE:
			case SHARED:
			case SMOOTH:
			case SUBROUTINE:
			case UNIFORM:
			case VARYING:
			case VOLATILE:
			case WRITEONLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398;
				type_qualifier();
				State = 399;
				type_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invariant_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVARIANT() { return GetToken(GLSLParser.INVARIANT, 0); }
		public Invariant_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invariant_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvariant_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Invariant_qualifierContext invariant_qualifier() {
		Invariant_qualifierContext _localctx = new Invariant_qualifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_invariant_qualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(INVARIANT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolation_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMOOTH() { return GetToken(GLSLParser.SMOOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAT() { return GetToken(GLSLParser.FLAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPERSPECTIVE() { return GetToken(GLSLParser.NOPERSPECTIVE, 0); }
		public Interpolation_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolation_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolation_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolation_qualifierContext interpolation_qualifier() {
		Interpolation_qualifierContext _localctx = new Interpolation_qualifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_interpolation_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			_la = TokenStream.LA(1);
			if ( !(_la==FLAT || _la==NOPERSPECTIVE || _la==SMOOTH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Layout_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAYOUT() { return GetToken(GLSLParser.LAYOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Layout_qualifier_id_listContext layout_qualifier_id_list() {
			return GetRuleContext<Layout_qualifier_id_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		public Layout_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_layout_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLayout_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Layout_qualifierContext layout_qualifier() {
		Layout_qualifierContext _localctx = new Layout_qualifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_layout_qualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(LAYOUT);
			State = 408;
			Match(LEFT_PAREN);
			State = 409;
			layout_qualifier_id_list();
			State = 410;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Layout_qualifier_id_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Layout_qualifier_idContext[] layout_qualifier_id() {
			return GetRuleContexts<Layout_qualifier_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Layout_qualifier_idContext layout_qualifier_id(int i) {
			return GetRuleContext<Layout_qualifier_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GLSLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GLSLParser.COMMA, i);
		}
		public Layout_qualifier_id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_layout_qualifier_id_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLayout_qualifier_id_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Layout_qualifier_id_listContext layout_qualifier_id_list() {
		Layout_qualifier_id_listContext _localctx = new Layout_qualifier_id_listContext(Context, State);
		EnterRule(_localctx, 60, RULE_layout_qualifier_id_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			layout_qualifier_id();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 413;
				Match(COMMA);
				State = 414;
				layout_qualifier_id();
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Layout_qualifier_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(GLSLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(GLSLParser.SHARED, 0); }
		public Layout_qualifier_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_layout_qualifier_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLayout_qualifier_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Layout_qualifier_idContext layout_qualifier_id() {
		Layout_qualifier_idContext _localctx = new Layout_qualifier_idContext(Context, State);
		EnterRule(_localctx, 62, RULE_layout_qualifier_id);
		int _la;
		try {
			State = 426;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				Match(IDENTIFIER);
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 421;
					Match(EQUAL);
					State = 422;
					constant_expression();
					}
				}

				}
				break;
			case SHARED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 425;
				Match(SHARED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precise_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISE() { return GetToken(GLSLParser.PRECISE, 0); }
		public Precise_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precise_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecise_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precise_qualifierContext precise_qualifier() {
		Precise_qualifierContext _localctx = new Precise_qualifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_precise_qualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(PRECISE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_type_qualifierContext[] single_type_qualifier() {
			return GetRuleContexts<Single_type_qualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_type_qualifierContext single_type_qualifier(int i) {
			return GetRuleContext<Single_type_qualifierContext>(i);
		}
		public Type_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_qualifierContext type_qualifier() {
		Type_qualifierContext _localctx = new Type_qualifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_type_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 430;
				single_type_qualifier();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -5764607445724821751L) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 615726523596803L) != 0) || ((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & 43218108417L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_type_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Storage_qualifierContext storage_qualifier() {
			return GetRuleContext<Storage_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Layout_qualifierContext layout_qualifier() {
			return GetRuleContext<Layout_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precision_qualifierContext precision_qualifier() {
			return GetRuleContext<Precision_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolation_qualifierContext interpolation_qualifier() {
			return GetRuleContext<Interpolation_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Invariant_qualifierContext invariant_qualifier() {
			return GetRuleContext<Invariant_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precise_qualifierContext precise_qualifier() {
			return GetRuleContext<Precise_qualifierContext>(0);
		}
		public Single_type_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_type_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_type_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_type_qualifierContext single_type_qualifier() {
		Single_type_qualifierContext _localctx = new Single_type_qualifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_single_type_qualifier);
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE:
			case BUFFER:
			case CENTROID:
			case COHERENT:
			case CONST:
			case IN:
			case INOUT:
			case OUT:
			case PATCH:
			case READONLY:
			case RESTRICT:
			case SAMPLE:
			case SHARED:
			case SUBROUTINE:
			case UNIFORM:
			case VARYING:
			case VOLATILE:
			case WRITEONLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 435;
				storage_qualifier();
				}
				break;
			case LAYOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436;
				layout_qualifier();
				}
				break;
			case HIGHP:
			case LOWP:
			case MEDIUMP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 437;
				precision_qualifier();
				}
				break;
			case FLAT:
			case NOPERSPECTIVE:
			case SMOOTH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 438;
				interpolation_qualifier();
				}
				break;
			case INVARIANT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 439;
				invariant_qualifier();
				}
				break;
			case PRECISE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 440;
				precise_qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Storage_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(GLSLParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(GLSLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(GLSLParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(GLSLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTROID() { return GetToken(GLSLParser.CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(GLSLParser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(GLSLParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIFORM() { return GetToken(GLSLParser.UNIFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(GLSLParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(GLSLParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COHERENT() { return GetToken(GLSLParser.COHERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(GLSLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(GLSLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(GLSLParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITEONLY() { return GetToken(GLSLParser.WRITEONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBROUTINE() { return GetToken(GLSLParser.SUBROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(GLSLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(GLSLParser.VARYING, 0); }
		public Storage_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storage_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorage_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Storage_qualifierContext storage_qualifier() {
		Storage_qualifierContext _localctx = new Storage_qualifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_storage_qualifier);
		int _la;
		try {
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443;
				Match(CONST);
				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444;
				Match(IN);
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 445;
				Match(OUT);
				}
				break;
			case INOUT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 446;
				Match(INOUT);
				}
				break;
			case CENTROID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 447;
				Match(CENTROID);
				}
				break;
			case PATCH:
				EnterOuterAlt(_localctx, 6);
				{
				State = 448;
				Match(PATCH);
				}
				break;
			case SAMPLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 449;
				Match(SAMPLE);
				}
				break;
			case UNIFORM:
				EnterOuterAlt(_localctx, 8);
				{
				State = 450;
				Match(UNIFORM);
				}
				break;
			case BUFFER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 451;
				Match(BUFFER);
				}
				break;
			case SHARED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 452;
				Match(SHARED);
				}
				break;
			case COHERENT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 453;
				Match(COHERENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 454;
				Match(VOLATILE);
				}
				break;
			case RESTRICT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 455;
				Match(RESTRICT);
				}
				break;
			case READONLY:
				EnterOuterAlt(_localctx, 14);
				{
				State = 456;
				Match(READONLY);
				}
				break;
			case WRITEONLY:
				EnterOuterAlt(_localctx, 15);
				{
				State = 457;
				Match(WRITEONLY);
				}
				break;
			case SUBROUTINE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 458;
				Match(SUBROUTINE);
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 459;
					Match(LEFT_PAREN);
					State = 460;
					type_name_list();
					State = 461;
					Match(RIGHT_PAREN);
					}
				}

				}
				break;
			case ATTRIBUTE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 465;
				Match(ATTRIBUTE);
				}
				break;
			case VARYING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 466;
				Match(VARYING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GLSLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GLSLParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		Type_name_listContext _localctx = new Type_name_listContext(Context, State);
		EnterRule(_localctx, 72, RULE_type_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			type_name();
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 470;
				Match(COMMA);
				State = 471;
				type_name();
				}
				}
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 74, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifier_nonarrayContext type_specifier_nonarray() {
			return GetRuleContext<Type_specifier_nonarrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_specifierContext array_specifier() {
			return GetRuleContext<Array_specifierContext>(0);
		}
		public Type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifierContext type_specifier() {
		Type_specifierContext _localctx = new Type_specifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_type_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			type_specifier_nonarray();
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 480;
				array_specifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext[] dimension() {
			return GetRuleContexts<DimensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext dimension(int i) {
			return GetRuleContext<DimensionContext>(i);
		}
		public Array_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_specifierContext array_specifier() {
		Array_specifierContext _localctx = new Array_specifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_array_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 483;
				dimension();
				}
				}
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LEFT_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(GLSLParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(GLSLParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public DimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionContext dimension() {
		DimensionContext _localctx = new DimensionContext(Context, State);
		EnterRule(_localctx, 80, RULE_dimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(LEFT_BRACKET);
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -6917529530286505755L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -4501401023543297L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -9222246411859393985L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & -8138003422817533829L) != 0)) {
				{
				State = 489;
				constant_expression();
				}
			}

			State = 492;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifier_nonarrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(GLSLParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GLSLParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(GLSLParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GLSLParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(GLSLParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GLSLParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VEC2() { return GetToken(GLSLParser.VEC2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VEC3() { return GetToken(GLSLParser.VEC3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VEC4() { return GetToken(GLSLParser.VEC4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DVEC2() { return GetToken(GLSLParser.DVEC2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DVEC3() { return GetToken(GLSLParser.DVEC3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DVEC4() { return GetToken(GLSLParser.DVEC4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVEC2() { return GetToken(GLSLParser.BVEC2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVEC3() { return GetToken(GLSLParser.BVEC3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVEC4() { return GetToken(GLSLParser.BVEC4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IVEC2() { return GetToken(GLSLParser.IVEC2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IVEC3() { return GetToken(GLSLParser.IVEC3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IVEC4() { return GetToken(GLSLParser.IVEC4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UVEC2() { return GetToken(GLSLParser.UVEC2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UVEC3() { return GetToken(GLSLParser.UVEC3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UVEC4() { return GetToken(GLSLParser.UVEC4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT2() { return GetToken(GLSLParser.MAT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT3() { return GetToken(GLSLParser.MAT3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT4() { return GetToken(GLSLParser.MAT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT2X2() { return GetToken(GLSLParser.MAT2X2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT2X3() { return GetToken(GLSLParser.MAT2X3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT2X4() { return GetToken(GLSLParser.MAT2X4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT3X2() { return GetToken(GLSLParser.MAT3X2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT3X3() { return GetToken(GLSLParser.MAT3X3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT3X4() { return GetToken(GLSLParser.MAT3X4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT4X2() { return GetToken(GLSLParser.MAT4X2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT4X3() { return GetToken(GLSLParser.MAT4X3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAT4X4() { return GetToken(GLSLParser.MAT4X4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT2() { return GetToken(GLSLParser.DMAT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT3() { return GetToken(GLSLParser.DMAT3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT4() { return GetToken(GLSLParser.DMAT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT2X2() { return GetToken(GLSLParser.DMAT2X2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT2X3() { return GetToken(GLSLParser.DMAT2X3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT2X4() { return GetToken(GLSLParser.DMAT2X4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT3X2() { return GetToken(GLSLParser.DMAT3X2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT3X3() { return GetToken(GLSLParser.DMAT3X3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT3X4() { return GetToken(GLSLParser.DMAT3X4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT4X2() { return GetToken(GLSLParser.DMAT4X2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT4X3() { return GetToken(GLSLParser.DMAT4X3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMAT4X4() { return GetToken(GLSLParser.DMAT4X4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOMIC_UINT() { return GetToken(GLSLParser.ATOMIC_UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2D() { return GetToken(GLSLParser.SAMPLER2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER3D() { return GetToken(GLSLParser.SAMPLER3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLERCUBE() { return GetToken(GLSLParser.SAMPLERCUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2DSHADOW() { return GetToken(GLSLParser.SAMPLER2DSHADOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLERCUBESHADOW() { return GetToken(GLSLParser.SAMPLERCUBESHADOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2DARRAY() { return GetToken(GLSLParser.SAMPLER2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2DARRAYSHADOW() { return GetToken(GLSLParser.SAMPLER2DARRAYSHADOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLERCUBEARRAY() { return GetToken(GLSLParser.SAMPLERCUBEARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLERCUBEARRAYSHADOW() { return GetToken(GLSLParser.SAMPLERCUBEARRAYSHADOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLER2D() { return GetToken(GLSLParser.ISAMPLER2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLER3D() { return GetToken(GLSLParser.ISAMPLER3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLERCUBE() { return GetToken(GLSLParser.ISAMPLERCUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLER2DARRAY() { return GetToken(GLSLParser.ISAMPLER2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLERCUBEARRAY() { return GetToken(GLSLParser.ISAMPLERCUBEARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLER2D() { return GetToken(GLSLParser.USAMPLER2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLER3D() { return GetToken(GLSLParser.USAMPLER3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLERCUBE() { return GetToken(GLSLParser.USAMPLERCUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLER2DARRAY() { return GetToken(GLSLParser.USAMPLER2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLERCUBEARRAY() { return GetToken(GLSLParser.USAMPLERCUBEARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER1D() { return GetToken(GLSLParser.SAMPLER1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER1DSHADOW() { return GetToken(GLSLParser.SAMPLER1DSHADOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER1DARRAY() { return GetToken(GLSLParser.SAMPLER1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER1DARRAYSHADOW() { return GetToken(GLSLParser.SAMPLER1DARRAYSHADOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLER1D() { return GetToken(GLSLParser.ISAMPLER1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLER1DARRAY() { return GetToken(GLSLParser.ISAMPLER1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLER1D() { return GetToken(GLSLParser.USAMPLER1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLER1DARRAY() { return GetToken(GLSLParser.USAMPLER1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2DRECT() { return GetToken(GLSLParser.SAMPLER2DRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2DRECTSHADOW() { return GetToken(GLSLParser.SAMPLER2DRECTSHADOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLER2DRECT() { return GetToken(GLSLParser.ISAMPLER2DRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLER2DRECT() { return GetToken(GLSLParser.USAMPLER2DRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLERBUFFER() { return GetToken(GLSLParser.SAMPLERBUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLERBUFFER() { return GetToken(GLSLParser.ISAMPLERBUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLERBUFFER() { return GetToken(GLSLParser.USAMPLERBUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2DMS() { return GetToken(GLSLParser.SAMPLER2DMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLER2DMS() { return GetToken(GLSLParser.ISAMPLER2DMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLER2DMS() { return GetToken(GLSLParser.USAMPLER2DMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLER2DMSARRAY() { return GetToken(GLSLParser.SAMPLER2DMSARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISAMPLER2DMSARRAY() { return GetToken(GLSLParser.ISAMPLER2DMSARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAMPLER2DMSARRAY() { return GetToken(GLSLParser.USAMPLER2DMSARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE2D() { return GetToken(GLSLParser.IMAGE2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGE2D() { return GetToken(GLSLParser.IIMAGE2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGE2D() { return GetToken(GLSLParser.UIMAGE2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE3D() { return GetToken(GLSLParser.IMAGE3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGE3D() { return GetToken(GLSLParser.IIMAGE3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGE3D() { return GetToken(GLSLParser.UIMAGE3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGECUBE() { return GetToken(GLSLParser.IMAGECUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGECUBE() { return GetToken(GLSLParser.IIMAGECUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGECUBE() { return GetToken(GLSLParser.UIMAGECUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGEBUFFER() { return GetToken(GLSLParser.IMAGEBUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGEBUFFER() { return GetToken(GLSLParser.IIMAGEBUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGEBUFFER() { return GetToken(GLSLParser.UIMAGEBUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE1D() { return GetToken(GLSLParser.IMAGE1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGE1D() { return GetToken(GLSLParser.IIMAGE1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGE1D() { return GetToken(GLSLParser.UIMAGE1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE1DARRAY() { return GetToken(GLSLParser.IMAGE1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGE1DARRAY() { return GetToken(GLSLParser.IIMAGE1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGE1DARRAY() { return GetToken(GLSLParser.UIMAGE1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE2DRECT() { return GetToken(GLSLParser.IMAGE2DRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGE2DRECT() { return GetToken(GLSLParser.IIMAGE2DRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGE2DRECT() { return GetToken(GLSLParser.UIMAGE2DRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE2DARRAY() { return GetToken(GLSLParser.IMAGE2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGE2DARRAY() { return GetToken(GLSLParser.IIMAGE2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGE2DARRAY() { return GetToken(GLSLParser.UIMAGE2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGECUBEARRAY() { return GetToken(GLSLParser.IMAGECUBEARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGECUBEARRAY() { return GetToken(GLSLParser.IIMAGECUBEARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGECUBEARRAY() { return GetToken(GLSLParser.UIMAGECUBEARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE2DMS() { return GetToken(GLSLParser.IMAGE2DMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGE2DMS() { return GetToken(GLSLParser.IIMAGE2DMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGE2DMS() { return GetToken(GLSLParser.UIMAGE2DMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE2DMSARRAY() { return GetToken(GLSLParser.IMAGE2DMSARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIMAGE2DMSARRAY() { return GetToken(GLSLParser.IIMAGE2DMSARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UIMAGE2DMSARRAY() { return GetToken(GLSLParser.UIMAGE2DMSARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_specifierContext struct_specifier() {
			return GetRuleContext<Struct_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Type_specifier_nonarrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier_nonarray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_specifier_nonarray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifier_nonarrayContext type_specifier_nonarray() {
		Type_specifier_nonarrayContext _localctx = new Type_specifier_nonarrayContext(Context, State);
		EnterRule(_localctx, 82, RULE_type_specifier_nonarray);
		try {
			State = 615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 494;
				Match(VOID);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495;
				Match(FLOAT);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 496;
				Match(DOUBLE);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 497;
				Match(INT);
				}
				break;
			case UINT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 498;
				Match(UINT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 499;
				Match(BOOL);
				}
				break;
			case VEC2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 500;
				Match(VEC2);
				}
				break;
			case VEC3:
				EnterOuterAlt(_localctx, 8);
				{
				State = 501;
				Match(VEC3);
				}
				break;
			case VEC4:
				EnterOuterAlt(_localctx, 9);
				{
				State = 502;
				Match(VEC4);
				}
				break;
			case DVEC2:
				EnterOuterAlt(_localctx, 10);
				{
				State = 503;
				Match(DVEC2);
				}
				break;
			case DVEC3:
				EnterOuterAlt(_localctx, 11);
				{
				State = 504;
				Match(DVEC3);
				}
				break;
			case DVEC4:
				EnterOuterAlt(_localctx, 12);
				{
				State = 505;
				Match(DVEC4);
				}
				break;
			case BVEC2:
				EnterOuterAlt(_localctx, 13);
				{
				State = 506;
				Match(BVEC2);
				}
				break;
			case BVEC3:
				EnterOuterAlt(_localctx, 14);
				{
				State = 507;
				Match(BVEC3);
				}
				break;
			case BVEC4:
				EnterOuterAlt(_localctx, 15);
				{
				State = 508;
				Match(BVEC4);
				}
				break;
			case IVEC2:
				EnterOuterAlt(_localctx, 16);
				{
				State = 509;
				Match(IVEC2);
				}
				break;
			case IVEC3:
				EnterOuterAlt(_localctx, 17);
				{
				State = 510;
				Match(IVEC3);
				}
				break;
			case IVEC4:
				EnterOuterAlt(_localctx, 18);
				{
				State = 511;
				Match(IVEC4);
				}
				break;
			case UVEC2:
				EnterOuterAlt(_localctx, 19);
				{
				State = 512;
				Match(UVEC2);
				}
				break;
			case UVEC3:
				EnterOuterAlt(_localctx, 20);
				{
				State = 513;
				Match(UVEC3);
				}
				break;
			case UVEC4:
				EnterOuterAlt(_localctx, 21);
				{
				State = 514;
				Match(UVEC4);
				}
				break;
			case MAT2:
				EnterOuterAlt(_localctx, 22);
				{
				State = 515;
				Match(MAT2);
				}
				break;
			case MAT3:
				EnterOuterAlt(_localctx, 23);
				{
				State = 516;
				Match(MAT3);
				}
				break;
			case MAT4:
				EnterOuterAlt(_localctx, 24);
				{
				State = 517;
				Match(MAT4);
				}
				break;
			case MAT2X2:
				EnterOuterAlt(_localctx, 25);
				{
				State = 518;
				Match(MAT2X2);
				}
				break;
			case MAT2X3:
				EnterOuterAlt(_localctx, 26);
				{
				State = 519;
				Match(MAT2X3);
				}
				break;
			case MAT2X4:
				EnterOuterAlt(_localctx, 27);
				{
				State = 520;
				Match(MAT2X4);
				}
				break;
			case MAT3X2:
				EnterOuterAlt(_localctx, 28);
				{
				State = 521;
				Match(MAT3X2);
				}
				break;
			case MAT3X3:
				EnterOuterAlt(_localctx, 29);
				{
				State = 522;
				Match(MAT3X3);
				}
				break;
			case MAT3X4:
				EnterOuterAlt(_localctx, 30);
				{
				State = 523;
				Match(MAT3X4);
				}
				break;
			case MAT4X2:
				EnterOuterAlt(_localctx, 31);
				{
				State = 524;
				Match(MAT4X2);
				}
				break;
			case MAT4X3:
				EnterOuterAlt(_localctx, 32);
				{
				State = 525;
				Match(MAT4X3);
				}
				break;
			case MAT4X4:
				EnterOuterAlt(_localctx, 33);
				{
				State = 526;
				Match(MAT4X4);
				}
				break;
			case DMAT2:
				EnterOuterAlt(_localctx, 34);
				{
				State = 527;
				Match(DMAT2);
				}
				break;
			case DMAT3:
				EnterOuterAlt(_localctx, 35);
				{
				State = 528;
				Match(DMAT3);
				}
				break;
			case DMAT4:
				EnterOuterAlt(_localctx, 36);
				{
				State = 529;
				Match(DMAT4);
				}
				break;
			case DMAT2X2:
				EnterOuterAlt(_localctx, 37);
				{
				State = 530;
				Match(DMAT2X2);
				}
				break;
			case DMAT2X3:
				EnterOuterAlt(_localctx, 38);
				{
				State = 531;
				Match(DMAT2X3);
				}
				break;
			case DMAT2X4:
				EnterOuterAlt(_localctx, 39);
				{
				State = 532;
				Match(DMAT2X4);
				}
				break;
			case DMAT3X2:
				EnterOuterAlt(_localctx, 40);
				{
				State = 533;
				Match(DMAT3X2);
				}
				break;
			case DMAT3X3:
				EnterOuterAlt(_localctx, 41);
				{
				State = 534;
				Match(DMAT3X3);
				}
				break;
			case DMAT3X4:
				EnterOuterAlt(_localctx, 42);
				{
				State = 535;
				Match(DMAT3X4);
				}
				break;
			case DMAT4X2:
				EnterOuterAlt(_localctx, 43);
				{
				State = 536;
				Match(DMAT4X2);
				}
				break;
			case DMAT4X3:
				EnterOuterAlt(_localctx, 44);
				{
				State = 537;
				Match(DMAT4X3);
				}
				break;
			case DMAT4X4:
				EnterOuterAlt(_localctx, 45);
				{
				State = 538;
				Match(DMAT4X4);
				}
				break;
			case ATOMIC_UINT:
				EnterOuterAlt(_localctx, 46);
				{
				State = 539;
				Match(ATOMIC_UINT);
				}
				break;
			case SAMPLER2D:
				EnterOuterAlt(_localctx, 47);
				{
				State = 540;
				Match(SAMPLER2D);
				}
				break;
			case SAMPLER3D:
				EnterOuterAlt(_localctx, 48);
				{
				State = 541;
				Match(SAMPLER3D);
				}
				break;
			case SAMPLERCUBE:
				EnterOuterAlt(_localctx, 49);
				{
				State = 542;
				Match(SAMPLERCUBE);
				}
				break;
			case SAMPLER2DSHADOW:
				EnterOuterAlt(_localctx, 50);
				{
				State = 543;
				Match(SAMPLER2DSHADOW);
				}
				break;
			case SAMPLERCUBESHADOW:
				EnterOuterAlt(_localctx, 51);
				{
				State = 544;
				Match(SAMPLERCUBESHADOW);
				}
				break;
			case SAMPLER2DARRAY:
				EnterOuterAlt(_localctx, 52);
				{
				State = 545;
				Match(SAMPLER2DARRAY);
				}
				break;
			case SAMPLER2DARRAYSHADOW:
				EnterOuterAlt(_localctx, 53);
				{
				State = 546;
				Match(SAMPLER2DARRAYSHADOW);
				}
				break;
			case SAMPLERCUBEARRAY:
				EnterOuterAlt(_localctx, 54);
				{
				State = 547;
				Match(SAMPLERCUBEARRAY);
				}
				break;
			case SAMPLERCUBEARRAYSHADOW:
				EnterOuterAlt(_localctx, 55);
				{
				State = 548;
				Match(SAMPLERCUBEARRAYSHADOW);
				}
				break;
			case ISAMPLER2D:
				EnterOuterAlt(_localctx, 56);
				{
				State = 549;
				Match(ISAMPLER2D);
				}
				break;
			case ISAMPLER3D:
				EnterOuterAlt(_localctx, 57);
				{
				State = 550;
				Match(ISAMPLER3D);
				}
				break;
			case ISAMPLERCUBE:
				EnterOuterAlt(_localctx, 58);
				{
				State = 551;
				Match(ISAMPLERCUBE);
				}
				break;
			case ISAMPLER2DARRAY:
				EnterOuterAlt(_localctx, 59);
				{
				State = 552;
				Match(ISAMPLER2DARRAY);
				}
				break;
			case ISAMPLERCUBEARRAY:
				EnterOuterAlt(_localctx, 60);
				{
				State = 553;
				Match(ISAMPLERCUBEARRAY);
				}
				break;
			case USAMPLER2D:
				EnterOuterAlt(_localctx, 61);
				{
				State = 554;
				Match(USAMPLER2D);
				}
				break;
			case USAMPLER3D:
				EnterOuterAlt(_localctx, 62);
				{
				State = 555;
				Match(USAMPLER3D);
				}
				break;
			case USAMPLERCUBE:
				EnterOuterAlt(_localctx, 63);
				{
				State = 556;
				Match(USAMPLERCUBE);
				}
				break;
			case USAMPLER2DARRAY:
				EnterOuterAlt(_localctx, 64);
				{
				State = 557;
				Match(USAMPLER2DARRAY);
				}
				break;
			case USAMPLERCUBEARRAY:
				EnterOuterAlt(_localctx, 65);
				{
				State = 558;
				Match(USAMPLERCUBEARRAY);
				}
				break;
			case SAMPLER1D:
				EnterOuterAlt(_localctx, 66);
				{
				State = 559;
				Match(SAMPLER1D);
				}
				break;
			case SAMPLER1DSHADOW:
				EnterOuterAlt(_localctx, 67);
				{
				State = 560;
				Match(SAMPLER1DSHADOW);
				}
				break;
			case SAMPLER1DARRAY:
				EnterOuterAlt(_localctx, 68);
				{
				State = 561;
				Match(SAMPLER1DARRAY);
				}
				break;
			case SAMPLER1DARRAYSHADOW:
				EnterOuterAlt(_localctx, 69);
				{
				State = 562;
				Match(SAMPLER1DARRAYSHADOW);
				}
				break;
			case ISAMPLER1D:
				EnterOuterAlt(_localctx, 70);
				{
				State = 563;
				Match(ISAMPLER1D);
				}
				break;
			case ISAMPLER1DARRAY:
				EnterOuterAlt(_localctx, 71);
				{
				State = 564;
				Match(ISAMPLER1DARRAY);
				}
				break;
			case USAMPLER1D:
				EnterOuterAlt(_localctx, 72);
				{
				State = 565;
				Match(USAMPLER1D);
				}
				break;
			case USAMPLER1DARRAY:
				EnterOuterAlt(_localctx, 73);
				{
				State = 566;
				Match(USAMPLER1DARRAY);
				}
				break;
			case SAMPLER2DRECT:
				EnterOuterAlt(_localctx, 74);
				{
				State = 567;
				Match(SAMPLER2DRECT);
				}
				break;
			case SAMPLER2DRECTSHADOW:
				EnterOuterAlt(_localctx, 75);
				{
				State = 568;
				Match(SAMPLER2DRECTSHADOW);
				}
				break;
			case ISAMPLER2DRECT:
				EnterOuterAlt(_localctx, 76);
				{
				State = 569;
				Match(ISAMPLER2DRECT);
				}
				break;
			case USAMPLER2DRECT:
				EnterOuterAlt(_localctx, 77);
				{
				State = 570;
				Match(USAMPLER2DRECT);
				}
				break;
			case SAMPLERBUFFER:
				EnterOuterAlt(_localctx, 78);
				{
				State = 571;
				Match(SAMPLERBUFFER);
				}
				break;
			case ISAMPLERBUFFER:
				EnterOuterAlt(_localctx, 79);
				{
				State = 572;
				Match(ISAMPLERBUFFER);
				}
				break;
			case USAMPLERBUFFER:
				EnterOuterAlt(_localctx, 80);
				{
				State = 573;
				Match(USAMPLERBUFFER);
				}
				break;
			case SAMPLER2DMS:
				EnterOuterAlt(_localctx, 81);
				{
				State = 574;
				Match(SAMPLER2DMS);
				}
				break;
			case ISAMPLER2DMS:
				EnterOuterAlt(_localctx, 82);
				{
				State = 575;
				Match(ISAMPLER2DMS);
				}
				break;
			case USAMPLER2DMS:
				EnterOuterAlt(_localctx, 83);
				{
				State = 576;
				Match(USAMPLER2DMS);
				}
				break;
			case SAMPLER2DMSARRAY:
				EnterOuterAlt(_localctx, 84);
				{
				State = 577;
				Match(SAMPLER2DMSARRAY);
				}
				break;
			case ISAMPLER2DMSARRAY:
				EnterOuterAlt(_localctx, 85);
				{
				State = 578;
				Match(ISAMPLER2DMSARRAY);
				}
				break;
			case USAMPLER2DMSARRAY:
				EnterOuterAlt(_localctx, 86);
				{
				State = 579;
				Match(USAMPLER2DMSARRAY);
				}
				break;
			case IMAGE2D:
				EnterOuterAlt(_localctx, 87);
				{
				State = 580;
				Match(IMAGE2D);
				}
				break;
			case IIMAGE2D:
				EnterOuterAlt(_localctx, 88);
				{
				State = 581;
				Match(IIMAGE2D);
				}
				break;
			case UIMAGE2D:
				EnterOuterAlt(_localctx, 89);
				{
				State = 582;
				Match(UIMAGE2D);
				}
				break;
			case IMAGE3D:
				EnterOuterAlt(_localctx, 90);
				{
				State = 583;
				Match(IMAGE3D);
				}
				break;
			case IIMAGE3D:
				EnterOuterAlt(_localctx, 91);
				{
				State = 584;
				Match(IIMAGE3D);
				}
				break;
			case UIMAGE3D:
				EnterOuterAlt(_localctx, 92);
				{
				State = 585;
				Match(UIMAGE3D);
				}
				break;
			case IMAGECUBE:
				EnterOuterAlt(_localctx, 93);
				{
				State = 586;
				Match(IMAGECUBE);
				}
				break;
			case IIMAGECUBE:
				EnterOuterAlt(_localctx, 94);
				{
				State = 587;
				Match(IIMAGECUBE);
				}
				break;
			case UIMAGECUBE:
				EnterOuterAlt(_localctx, 95);
				{
				State = 588;
				Match(UIMAGECUBE);
				}
				break;
			case IMAGEBUFFER:
				EnterOuterAlt(_localctx, 96);
				{
				State = 589;
				Match(IMAGEBUFFER);
				}
				break;
			case IIMAGEBUFFER:
				EnterOuterAlt(_localctx, 97);
				{
				State = 590;
				Match(IIMAGEBUFFER);
				}
				break;
			case UIMAGEBUFFER:
				EnterOuterAlt(_localctx, 98);
				{
				State = 591;
				Match(UIMAGEBUFFER);
				}
				break;
			case IMAGE1D:
				EnterOuterAlt(_localctx, 99);
				{
				State = 592;
				Match(IMAGE1D);
				}
				break;
			case IIMAGE1D:
				EnterOuterAlt(_localctx, 100);
				{
				State = 593;
				Match(IIMAGE1D);
				}
				break;
			case UIMAGE1D:
				EnterOuterAlt(_localctx, 101);
				{
				State = 594;
				Match(UIMAGE1D);
				}
				break;
			case IMAGE1DARRAY:
				EnterOuterAlt(_localctx, 102);
				{
				State = 595;
				Match(IMAGE1DARRAY);
				}
				break;
			case IIMAGE1DARRAY:
				EnterOuterAlt(_localctx, 103);
				{
				State = 596;
				Match(IIMAGE1DARRAY);
				}
				break;
			case UIMAGE1DARRAY:
				EnterOuterAlt(_localctx, 104);
				{
				State = 597;
				Match(UIMAGE1DARRAY);
				}
				break;
			case IMAGE2DRECT:
				EnterOuterAlt(_localctx, 105);
				{
				State = 598;
				Match(IMAGE2DRECT);
				}
				break;
			case IIMAGE2DRECT:
				EnterOuterAlt(_localctx, 106);
				{
				State = 599;
				Match(IIMAGE2DRECT);
				}
				break;
			case UIMAGE2DRECT:
				EnterOuterAlt(_localctx, 107);
				{
				State = 600;
				Match(UIMAGE2DRECT);
				}
				break;
			case IMAGE2DARRAY:
				EnterOuterAlt(_localctx, 108);
				{
				State = 601;
				Match(IMAGE2DARRAY);
				}
				break;
			case IIMAGE2DARRAY:
				EnterOuterAlt(_localctx, 109);
				{
				State = 602;
				Match(IIMAGE2DARRAY);
				}
				break;
			case UIMAGE2DARRAY:
				EnterOuterAlt(_localctx, 110);
				{
				State = 603;
				Match(UIMAGE2DARRAY);
				}
				break;
			case IMAGECUBEARRAY:
				EnterOuterAlt(_localctx, 111);
				{
				State = 604;
				Match(IMAGECUBEARRAY);
				}
				break;
			case IIMAGECUBEARRAY:
				EnterOuterAlt(_localctx, 112);
				{
				State = 605;
				Match(IIMAGECUBEARRAY);
				}
				break;
			case UIMAGECUBEARRAY:
				EnterOuterAlt(_localctx, 113);
				{
				State = 606;
				Match(UIMAGECUBEARRAY);
				}
				break;
			case IMAGE2DMS:
				EnterOuterAlt(_localctx, 114);
				{
				State = 607;
				Match(IMAGE2DMS);
				}
				break;
			case IIMAGE2DMS:
				EnterOuterAlt(_localctx, 115);
				{
				State = 608;
				Match(IIMAGE2DMS);
				}
				break;
			case UIMAGE2DMS:
				EnterOuterAlt(_localctx, 116);
				{
				State = 609;
				Match(UIMAGE2DMS);
				}
				break;
			case IMAGE2DMSARRAY:
				EnterOuterAlt(_localctx, 117);
				{
				State = 610;
				Match(IMAGE2DMSARRAY);
				}
				break;
			case IIMAGE2DMSARRAY:
				EnterOuterAlt(_localctx, 118);
				{
				State = 611;
				Match(IIMAGE2DMSARRAY);
				}
				break;
			case UIMAGE2DMSARRAY:
				EnterOuterAlt(_localctx, 119);
				{
				State = 612;
				Match(UIMAGE2DMSARRAY);
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 120);
				{
				State = 613;
				struct_specifier();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 121);
				{
				State = 614;
				type_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precision_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGHP() { return GetToken(GLSLParser.HIGHP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMP() { return GetToken(GLSLParser.MEDIUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWP() { return GetToken(GLSLParser.LOWP, 0); }
		public Precision_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precision_qualifierContext precision_qualifier() {
		Precision_qualifierContext _localctx = new Precision_qualifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_precision_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			_la = TokenStream.LA(1);
			if ( !(_la==HIGHP || _la==LOWP || _la==MEDIUMP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(GLSLParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(GLSLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_listContext struct_declaration_list() {
			return GetRuleContext<Struct_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(GLSLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		public Struct_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_specifierContext struct_specifier() {
		Struct_specifierContext _localctx = new Struct_specifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_struct_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(STRUCT);
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 620;
				Match(IDENTIFIER);
				}
			}

			State = 623;
			Match(LEFT_BRACE);
			State = 624;
			struct_declaration_list();
			State = 625;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declaration_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarationContext[] struct_declaration() {
			return GetRuleContexts<Struct_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarationContext struct_declaration(int i) {
			return GetRuleContext<Struct_declarationContext>(i);
		}
		public Struct_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declaration_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declaration_listContext struct_declaration_list() {
		Struct_declaration_listContext _localctx = new Struct_declaration_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_struct_declaration_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 627;
				struct_declaration();
				}
				}
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -713233064466L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -11540474112237569L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4503599358955263L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 1535L) != 0) || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarator_listContext struct_declarator_list() {
			return GetRuleContext<Struct_declarator_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GLSLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_qualifierContext type_qualifier() {
			return GetRuleContext<Type_qualifierContext>(0);
		}
		public Struct_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationContext struct_declaration() {
		Struct_declarationContext _localctx = new Struct_declarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_struct_declaration);
		try {
			State = 641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATOMIC_UINT:
			case BOOL:
			case BVEC2:
			case BVEC3:
			case BVEC4:
			case DMAT2:
			case DMAT2X2:
			case DMAT2X3:
			case DMAT2X4:
			case DMAT3:
			case DMAT3X2:
			case DMAT3X3:
			case DMAT3X4:
			case DMAT4:
			case DMAT4X2:
			case DMAT4X3:
			case DMAT4X4:
			case DOUBLE:
			case DVEC2:
			case DVEC3:
			case DVEC4:
			case FLOAT:
			case IIMAGE1D:
			case IIMAGE1DARRAY:
			case IIMAGE2D:
			case IIMAGE2DARRAY:
			case IIMAGE2DMS:
			case IIMAGE2DMSARRAY:
			case IIMAGE2DRECT:
			case IIMAGE3D:
			case IIMAGEBUFFER:
			case IIMAGECUBE:
			case IIMAGECUBEARRAY:
			case IMAGE1D:
			case IMAGE1DARRAY:
			case IMAGE2D:
			case IMAGE2DARRAY:
			case IMAGE2DMS:
			case IMAGE2DMSARRAY:
			case IMAGE2DRECT:
			case IMAGE3D:
			case IMAGEBUFFER:
			case IMAGECUBE:
			case IMAGECUBEARRAY:
			case INT:
			case ISAMPLER1D:
			case ISAMPLER1DARRAY:
			case ISAMPLER2D:
			case ISAMPLER2DARRAY:
			case ISAMPLER2DMS:
			case ISAMPLER2DMSARRAY:
			case ISAMPLER2DRECT:
			case ISAMPLER3D:
			case ISAMPLERBUFFER:
			case ISAMPLERCUBE:
			case ISAMPLERCUBEARRAY:
			case IVEC2:
			case IVEC3:
			case IVEC4:
			case MAT2:
			case MAT2X2:
			case MAT2X3:
			case MAT2X4:
			case MAT3:
			case MAT3X2:
			case MAT3X3:
			case MAT3X4:
			case MAT4:
			case MAT4X2:
			case MAT4X3:
			case MAT4X4:
			case SAMPLER1D:
			case SAMPLER1DARRAY:
			case SAMPLER1DARRAYSHADOW:
			case SAMPLER1DSHADOW:
			case SAMPLER2D:
			case SAMPLER2DARRAY:
			case SAMPLER2DARRAYSHADOW:
			case SAMPLER2DMS:
			case SAMPLER2DMSARRAY:
			case SAMPLER2DRECT:
			case SAMPLER2DRECTSHADOW:
			case SAMPLER2DSHADOW:
			case SAMPLER3D:
			case SAMPLERBUFFER:
			case SAMPLERCUBE:
			case SAMPLERCUBEARRAY:
			case SAMPLERCUBEARRAYSHADOW:
			case SAMPLERCUBESHADOW:
			case STRUCT:
			case UIMAGE1D:
			case UIMAGE1DARRAY:
			case UIMAGE2D:
			case UIMAGE2DARRAY:
			case UIMAGE2DMS:
			case UIMAGE2DMSARRAY:
			case UIMAGE2DRECT:
			case UIMAGE3D:
			case UIMAGEBUFFER:
			case UIMAGECUBE:
			case UIMAGECUBEARRAY:
			case UINT:
			case USAMPLER1D:
			case USAMPLER1DARRAY:
			case USAMPLER2D:
			case USAMPLER2DARRAY:
			case USAMPLER2DMS:
			case USAMPLER2DMSARRAY:
			case USAMPLER2DRECT:
			case USAMPLER3D:
			case USAMPLERBUFFER:
			case USAMPLERCUBE:
			case USAMPLERCUBEARRAY:
			case UVEC2:
			case UVEC3:
			case UVEC4:
			case VEC2:
			case VEC3:
			case VEC4:
			case VOID:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632;
				type_specifier();
				State = 633;
				struct_declarator_list();
				State = 634;
				Match(SEMICOLON);
				}
				break;
			case ATTRIBUTE:
			case BUFFER:
			case CENTROID:
			case COHERENT:
			case CONST:
			case FLAT:
			case HIGHP:
			case IN:
			case INOUT:
			case INVARIANT:
			case LAYOUT:
			case LOWP:
			case MEDIUMP:
			case NOPERSPECTIVE:
			case OUT:
			case PATCH:
			case PRECISE:
			case READONLY:
			case RESTRICT:
			case SAMPLE:
			case SHARED:
			case SMOOTH:
			case SUBROUTINE:
			case UNIFORM:
			case VARYING:
			case VOLATILE:
			case WRITEONLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636;
				type_qualifier();
				State = 637;
				type_specifier();
				State = 638;
				struct_declarator_list();
				State = 639;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaratorContext[] struct_declarator() {
			return GetRuleContexts<Struct_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaratorContext struct_declarator(int i) {
			return GetRuleContext<Struct_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GLSLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GLSLParser.COMMA, i);
		}
		public Struct_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarator_listContext struct_declarator_list() {
		Struct_declarator_listContext _localctx = new Struct_declarator_listContext(Context, State);
		EnterRule(_localctx, 92, RULE_struct_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			struct_declarator();
			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 644;
				Match(COMMA);
				State = 645;
				struct_declarator();
				}
				}
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specifierContext array_specifier() {
			return GetRuleContext<Array_specifierContext>(0);
		}
		public Struct_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declaratorContext struct_declarator() {
		Struct_declaratorContext _localctx = new Struct_declaratorContext(Context, State);
		EnterRule(_localctx, 94, RULE_struct_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			Match(IDENTIFIER);
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_BRACKET) {
				{
				State = 652;
				array_specifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(GLSLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_listContext initializer_list() {
			return GetRuleContext<Initializer_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(GLSLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GLSLParser.COMMA, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 96, RULE_initializer);
		int _la;
		try {
			State = 663;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATOMIC_UINT:
			case BOOL:
			case BVEC2:
			case BVEC3:
			case BVEC4:
			case DMAT2:
			case DMAT2X2:
			case DMAT2X3:
			case DMAT2X4:
			case DMAT3:
			case DMAT3X2:
			case DMAT3X3:
			case DMAT3X4:
			case DMAT4:
			case DMAT4X2:
			case DMAT4X3:
			case DMAT4X4:
			case DOUBLE:
			case DVEC2:
			case DVEC3:
			case DVEC4:
			case FALSE:
			case FLOAT:
			case IIMAGE1D:
			case IIMAGE1DARRAY:
			case IIMAGE2D:
			case IIMAGE2DARRAY:
			case IIMAGE2DMS:
			case IIMAGE2DMSARRAY:
			case IIMAGE2DRECT:
			case IIMAGE3D:
			case IIMAGEBUFFER:
			case IIMAGECUBE:
			case IIMAGECUBEARRAY:
			case IMAGE1D:
			case IMAGE1DARRAY:
			case IMAGE2D:
			case IMAGE2DARRAY:
			case IMAGE2DMS:
			case IMAGE2DMSARRAY:
			case IMAGE2DRECT:
			case IMAGE3D:
			case IMAGEBUFFER:
			case IMAGECUBE:
			case IMAGECUBEARRAY:
			case INT:
			case ISAMPLER1D:
			case ISAMPLER1DARRAY:
			case ISAMPLER2D:
			case ISAMPLER2DARRAY:
			case ISAMPLER2DMS:
			case ISAMPLER2DMSARRAY:
			case ISAMPLER2DRECT:
			case ISAMPLER3D:
			case ISAMPLERBUFFER:
			case ISAMPLERCUBE:
			case ISAMPLERCUBEARRAY:
			case IVEC2:
			case IVEC3:
			case IVEC4:
			case MAT2:
			case MAT2X2:
			case MAT2X3:
			case MAT2X4:
			case MAT3:
			case MAT3X2:
			case MAT3X3:
			case MAT3X4:
			case MAT4:
			case MAT4X2:
			case MAT4X3:
			case MAT4X4:
			case SAMPLER1D:
			case SAMPLER1DARRAY:
			case SAMPLER1DARRAYSHADOW:
			case SAMPLER1DSHADOW:
			case SAMPLER2D:
			case SAMPLER2DARRAY:
			case SAMPLER2DARRAYSHADOW:
			case SAMPLER2DMS:
			case SAMPLER2DMSARRAY:
			case SAMPLER2DRECT:
			case SAMPLER2DRECTSHADOW:
			case SAMPLER2DSHADOW:
			case SAMPLER3D:
			case SAMPLERBUFFER:
			case SAMPLERCUBE:
			case SAMPLERCUBEARRAY:
			case SAMPLERCUBEARRAYSHADOW:
			case SAMPLERCUBESHADOW:
			case STRUCT:
			case TRUE:
			case UIMAGE1D:
			case UIMAGE1DARRAY:
			case UIMAGE2D:
			case UIMAGE2DARRAY:
			case UIMAGE2DMS:
			case UIMAGE2DMSARRAY:
			case UIMAGE2DRECT:
			case UIMAGE3D:
			case UIMAGEBUFFER:
			case UIMAGECUBE:
			case UIMAGECUBEARRAY:
			case UINT:
			case USAMPLER1D:
			case USAMPLER1DARRAY:
			case USAMPLER2D:
			case USAMPLER2DARRAY:
			case USAMPLER2DMS:
			case USAMPLER2DMSARRAY:
			case USAMPLER2DRECT:
			case USAMPLER3D:
			case USAMPLERBUFFER:
			case USAMPLERCUBE:
			case USAMPLERCUBEARRAY:
			case UVEC2:
			case UVEC3:
			case UVEC4:
			case VEC2:
			case VEC3:
			case VEC4:
			case VOID:
			case BANG:
			case DASH:
			case DEC_OP:
			case INC_OP:
			case LEFT_PAREN:
			case PLUS:
			case TILDE:
			case DOUBLECONSTANT:
			case FLOATCONSTANT:
			case INTCONSTANT:
			case UINTCONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 655;
				assignment_expression();
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 656;
				Match(LEFT_BRACE);
				State = 657;
				initializer_list();
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 658;
					Match(COMMA);
					}
				}

				State = 661;
				Match(RIGHT_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext[] initializer() {
			return GetRuleContexts<InitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer(int i) {
			return GetRuleContext<InitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GLSLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GLSLParser.COMMA, i);
		}
		public Initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_listContext initializer_list() {
		Initializer_listContext _localctx = new Initializer_listContext(Context, State);
		EnterRule(_localctx, 98, RULE_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			initializer();
			State = 670;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 666;
					Match(COMMA);
					State = 667;
					initializer();
					}
					} 
				}
				State = 672;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(Context, State);
		EnterRule(_localctx, 100, RULE_declaration_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_statementContext simple_statement() {
			return GetRuleContext<Simple_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_statement);
		try {
			State = 677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675;
				compound_statement();
				}
				break;
			case ATOMIC_UINT:
			case ATTRIBUTE:
			case BOOL:
			case BREAK:
			case BUFFER:
			case BVEC2:
			case BVEC3:
			case BVEC4:
			case CASE:
			case CENTROID:
			case COHERENT:
			case CONST:
			case CONTINUE:
			case DEFAULT:
			case DISCARD:
			case DMAT2:
			case DMAT2X2:
			case DMAT2X3:
			case DMAT2X4:
			case DMAT3:
			case DMAT3X2:
			case DMAT3X3:
			case DMAT3X4:
			case DMAT4:
			case DMAT4X2:
			case DMAT4X3:
			case DMAT4X4:
			case DO:
			case DOUBLE:
			case DVEC2:
			case DVEC3:
			case DVEC4:
			case FALSE:
			case FLAT:
			case FLOAT:
			case FOR:
			case HIGHP:
			case IF:
			case IIMAGE1D:
			case IIMAGE1DARRAY:
			case IIMAGE2D:
			case IIMAGE2DARRAY:
			case IIMAGE2DMS:
			case IIMAGE2DMSARRAY:
			case IIMAGE2DRECT:
			case IIMAGE3D:
			case IIMAGEBUFFER:
			case IIMAGECUBE:
			case IIMAGECUBEARRAY:
			case IMAGE1D:
			case IMAGE1DARRAY:
			case IMAGE2D:
			case IMAGE2DARRAY:
			case IMAGE2DMS:
			case IMAGE2DMSARRAY:
			case IMAGE2DRECT:
			case IMAGE3D:
			case IMAGEBUFFER:
			case IMAGECUBE:
			case IMAGECUBEARRAY:
			case IN:
			case INOUT:
			case INT:
			case INVARIANT:
			case ISAMPLER1D:
			case ISAMPLER1DARRAY:
			case ISAMPLER2D:
			case ISAMPLER2DARRAY:
			case ISAMPLER2DMS:
			case ISAMPLER2DMSARRAY:
			case ISAMPLER2DRECT:
			case ISAMPLER3D:
			case ISAMPLERBUFFER:
			case ISAMPLERCUBE:
			case ISAMPLERCUBEARRAY:
			case IVEC2:
			case IVEC3:
			case IVEC4:
			case LAYOUT:
			case LOWP:
			case MAT2:
			case MAT2X2:
			case MAT2X3:
			case MAT2X4:
			case MAT3:
			case MAT3X2:
			case MAT3X3:
			case MAT3X4:
			case MAT4:
			case MAT4X2:
			case MAT4X3:
			case MAT4X4:
			case MEDIUMP:
			case NOPERSPECTIVE:
			case OUT:
			case PATCH:
			case PRECISE:
			case PRECISION:
			case READONLY:
			case RESTRICT:
			case RETURN:
			case SAMPLE:
			case SAMPLER1D:
			case SAMPLER1DARRAY:
			case SAMPLER1DARRAYSHADOW:
			case SAMPLER1DSHADOW:
			case SAMPLER2D:
			case SAMPLER2DARRAY:
			case SAMPLER2DARRAYSHADOW:
			case SAMPLER2DMS:
			case SAMPLER2DMSARRAY:
			case SAMPLER2DRECT:
			case SAMPLER2DRECTSHADOW:
			case SAMPLER2DSHADOW:
			case SAMPLER3D:
			case SAMPLERBUFFER:
			case SAMPLERCUBE:
			case SAMPLERCUBEARRAY:
			case SAMPLERCUBEARRAYSHADOW:
			case SAMPLERCUBESHADOW:
			case SHARED:
			case SMOOTH:
			case STRUCT:
			case SUBROUTINE:
			case SWITCH:
			case TRUE:
			case UIMAGE1D:
			case UIMAGE1DARRAY:
			case UIMAGE2D:
			case UIMAGE2DARRAY:
			case UIMAGE2DMS:
			case UIMAGE2DMSARRAY:
			case UIMAGE2DRECT:
			case UIMAGE3D:
			case UIMAGEBUFFER:
			case UIMAGECUBE:
			case UIMAGECUBEARRAY:
			case UINT:
			case UNIFORM:
			case USAMPLER1D:
			case USAMPLER1DARRAY:
			case USAMPLER2D:
			case USAMPLER2DARRAY:
			case USAMPLER2DMS:
			case USAMPLER2DMSARRAY:
			case USAMPLER2DRECT:
			case USAMPLER3D:
			case USAMPLERBUFFER:
			case USAMPLERCUBE:
			case USAMPLERCUBEARRAY:
			case UVEC2:
			case UVEC3:
			case UVEC4:
			case VARYING:
			case VEC2:
			case VEC3:
			case VEC4:
			case VOID:
			case VOLATILE:
			case WHILE:
			case WRITEONLY:
			case BANG:
			case DASH:
			case DEC_OP:
			case INC_OP:
			case LEFT_PAREN:
			case PLUS:
			case SEMICOLON:
			case TILDE:
			case DOUBLECONSTANT:
			case FLOATCONSTANT:
			case INTCONSTANT:
			case UINTCONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 676;
				simple_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_labelContext case_label() {
			return GetRuleContext<Case_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public Simple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_statementContext simple_statement() {
		Simple_statementContext _localctx = new Simple_statementContext(Context, State);
		EnterRule(_localctx, 104, RULE_simple_statement);
		try {
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 679;
				declaration_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 680;
				expression_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 681;
				selection_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 682;
				switch_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 683;
				case_label();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 684;
				iteration_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 685;
				jump_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(GLSLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(GLSLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(Context, State);
		EnterRule(_localctx, 106, RULE_compound_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(LEFT_BRACE);
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8589934594L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9007199321841665L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4503599493205759L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 2171300179101648895L) != 0) || _la==IDENTIFIER) {
				{
				State = 689;
				statement_list();
				}
			}

			State = 692;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_no_new_scopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statement_no_new_scopeContext compound_statement_no_new_scope() {
			return GetRuleContext<Compound_statement_no_new_scopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_statementContext simple_statement() {
			return GetRuleContext<Simple_statementContext>(0);
		}
		public Statement_no_new_scopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_no_new_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_no_new_scope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_no_new_scopeContext statement_no_new_scope() {
		Statement_no_new_scopeContext _localctx = new Statement_no_new_scopeContext(Context, State);
		EnterRule(_localctx, 108, RULE_statement_no_new_scope);
		try {
			State = 696;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				compound_statement_no_new_scope();
				}
				break;
			case ATOMIC_UINT:
			case ATTRIBUTE:
			case BOOL:
			case BREAK:
			case BUFFER:
			case BVEC2:
			case BVEC3:
			case BVEC4:
			case CASE:
			case CENTROID:
			case COHERENT:
			case CONST:
			case CONTINUE:
			case DEFAULT:
			case DISCARD:
			case DMAT2:
			case DMAT2X2:
			case DMAT2X3:
			case DMAT2X4:
			case DMAT3:
			case DMAT3X2:
			case DMAT3X3:
			case DMAT3X4:
			case DMAT4:
			case DMAT4X2:
			case DMAT4X3:
			case DMAT4X4:
			case DO:
			case DOUBLE:
			case DVEC2:
			case DVEC3:
			case DVEC4:
			case FALSE:
			case FLAT:
			case FLOAT:
			case FOR:
			case HIGHP:
			case IF:
			case IIMAGE1D:
			case IIMAGE1DARRAY:
			case IIMAGE2D:
			case IIMAGE2DARRAY:
			case IIMAGE2DMS:
			case IIMAGE2DMSARRAY:
			case IIMAGE2DRECT:
			case IIMAGE3D:
			case IIMAGEBUFFER:
			case IIMAGECUBE:
			case IIMAGECUBEARRAY:
			case IMAGE1D:
			case IMAGE1DARRAY:
			case IMAGE2D:
			case IMAGE2DARRAY:
			case IMAGE2DMS:
			case IMAGE2DMSARRAY:
			case IMAGE2DRECT:
			case IMAGE3D:
			case IMAGEBUFFER:
			case IMAGECUBE:
			case IMAGECUBEARRAY:
			case IN:
			case INOUT:
			case INT:
			case INVARIANT:
			case ISAMPLER1D:
			case ISAMPLER1DARRAY:
			case ISAMPLER2D:
			case ISAMPLER2DARRAY:
			case ISAMPLER2DMS:
			case ISAMPLER2DMSARRAY:
			case ISAMPLER2DRECT:
			case ISAMPLER3D:
			case ISAMPLERBUFFER:
			case ISAMPLERCUBE:
			case ISAMPLERCUBEARRAY:
			case IVEC2:
			case IVEC3:
			case IVEC4:
			case LAYOUT:
			case LOWP:
			case MAT2:
			case MAT2X2:
			case MAT2X3:
			case MAT2X4:
			case MAT3:
			case MAT3X2:
			case MAT3X3:
			case MAT3X4:
			case MAT4:
			case MAT4X2:
			case MAT4X3:
			case MAT4X4:
			case MEDIUMP:
			case NOPERSPECTIVE:
			case OUT:
			case PATCH:
			case PRECISE:
			case PRECISION:
			case READONLY:
			case RESTRICT:
			case RETURN:
			case SAMPLE:
			case SAMPLER1D:
			case SAMPLER1DARRAY:
			case SAMPLER1DARRAYSHADOW:
			case SAMPLER1DSHADOW:
			case SAMPLER2D:
			case SAMPLER2DARRAY:
			case SAMPLER2DARRAYSHADOW:
			case SAMPLER2DMS:
			case SAMPLER2DMSARRAY:
			case SAMPLER2DRECT:
			case SAMPLER2DRECTSHADOW:
			case SAMPLER2DSHADOW:
			case SAMPLER3D:
			case SAMPLERBUFFER:
			case SAMPLERCUBE:
			case SAMPLERCUBEARRAY:
			case SAMPLERCUBEARRAYSHADOW:
			case SAMPLERCUBESHADOW:
			case SHARED:
			case SMOOTH:
			case STRUCT:
			case SUBROUTINE:
			case SWITCH:
			case TRUE:
			case UIMAGE1D:
			case UIMAGE1DARRAY:
			case UIMAGE2D:
			case UIMAGE2DARRAY:
			case UIMAGE2DMS:
			case UIMAGE2DMSARRAY:
			case UIMAGE2DRECT:
			case UIMAGE3D:
			case UIMAGEBUFFER:
			case UIMAGECUBE:
			case UIMAGECUBEARRAY:
			case UINT:
			case UNIFORM:
			case USAMPLER1D:
			case USAMPLER1DARRAY:
			case USAMPLER2D:
			case USAMPLER2DARRAY:
			case USAMPLER2DMS:
			case USAMPLER2DMSARRAY:
			case USAMPLER2DRECT:
			case USAMPLER3D:
			case USAMPLERBUFFER:
			case USAMPLERCUBE:
			case USAMPLERCUBEARRAY:
			case UVEC2:
			case UVEC3:
			case UVEC4:
			case VARYING:
			case VEC2:
			case VEC3:
			case VEC4:
			case VOID:
			case VOLATILE:
			case WHILE:
			case WRITEONLY:
			case BANG:
			case DASH:
			case DEC_OP:
			case INC_OP:
			case LEFT_PAREN:
			case PLUS:
			case SEMICOLON:
			case TILDE:
			case DOUBLECONSTANT:
			case FLOATCONSTANT:
			case INTCONSTANT:
			case UINTCONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				simple_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statement_no_new_scopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(GLSLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(GLSLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Compound_statement_no_new_scopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement_no_new_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_statement_no_new_scope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statement_no_new_scopeContext compound_statement_no_new_scope() {
		Compound_statement_no_new_scopeContext _localctx = new Compound_statement_no_new_scopeContext(Context, State);
		EnterRule(_localctx, 110, RULE_compound_statement_no_new_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(LEFT_BRACE);
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8589934594L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9007199321841665L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4503599493205759L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 2171300179101648895L) != 0) || _la==IDENTIFIER) {
				{
				State = 699;
				statement_list();
				}
			}

			State = 702;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 112, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 704;
				statement();
				}
				}
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -8589934594L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9007199321841665L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4503599493205759L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 2171300179101648895L) != 0) || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GLSLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 114, RULE_expression_statement);
		try {
			State = 713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 709;
				Match(SEMICOLON);
				}
				break;
			case ATOMIC_UINT:
			case BOOL:
			case BVEC2:
			case BVEC3:
			case BVEC4:
			case DMAT2:
			case DMAT2X2:
			case DMAT2X3:
			case DMAT2X4:
			case DMAT3:
			case DMAT3X2:
			case DMAT3X3:
			case DMAT3X4:
			case DMAT4:
			case DMAT4X2:
			case DMAT4X3:
			case DMAT4X4:
			case DOUBLE:
			case DVEC2:
			case DVEC3:
			case DVEC4:
			case FALSE:
			case FLOAT:
			case IIMAGE1D:
			case IIMAGE1DARRAY:
			case IIMAGE2D:
			case IIMAGE2DARRAY:
			case IIMAGE2DMS:
			case IIMAGE2DMSARRAY:
			case IIMAGE2DRECT:
			case IIMAGE3D:
			case IIMAGEBUFFER:
			case IIMAGECUBE:
			case IIMAGECUBEARRAY:
			case IMAGE1D:
			case IMAGE1DARRAY:
			case IMAGE2D:
			case IMAGE2DARRAY:
			case IMAGE2DMS:
			case IMAGE2DMSARRAY:
			case IMAGE2DRECT:
			case IMAGE3D:
			case IMAGEBUFFER:
			case IMAGECUBE:
			case IMAGECUBEARRAY:
			case INT:
			case ISAMPLER1D:
			case ISAMPLER1DARRAY:
			case ISAMPLER2D:
			case ISAMPLER2DARRAY:
			case ISAMPLER2DMS:
			case ISAMPLER2DMSARRAY:
			case ISAMPLER2DRECT:
			case ISAMPLER3D:
			case ISAMPLERBUFFER:
			case ISAMPLERCUBE:
			case ISAMPLERCUBEARRAY:
			case IVEC2:
			case IVEC3:
			case IVEC4:
			case MAT2:
			case MAT2X2:
			case MAT2X3:
			case MAT2X4:
			case MAT3:
			case MAT3X2:
			case MAT3X3:
			case MAT3X4:
			case MAT4:
			case MAT4X2:
			case MAT4X3:
			case MAT4X4:
			case SAMPLER1D:
			case SAMPLER1DARRAY:
			case SAMPLER1DARRAYSHADOW:
			case SAMPLER1DSHADOW:
			case SAMPLER2D:
			case SAMPLER2DARRAY:
			case SAMPLER2DARRAYSHADOW:
			case SAMPLER2DMS:
			case SAMPLER2DMSARRAY:
			case SAMPLER2DRECT:
			case SAMPLER2DRECTSHADOW:
			case SAMPLER2DSHADOW:
			case SAMPLER3D:
			case SAMPLERBUFFER:
			case SAMPLERCUBE:
			case SAMPLERCUBEARRAY:
			case SAMPLERCUBEARRAYSHADOW:
			case SAMPLERCUBESHADOW:
			case STRUCT:
			case TRUE:
			case UIMAGE1D:
			case UIMAGE1DARRAY:
			case UIMAGE2D:
			case UIMAGE2DARRAY:
			case UIMAGE2DMS:
			case UIMAGE2DMSARRAY:
			case UIMAGE2DRECT:
			case UIMAGE3D:
			case UIMAGEBUFFER:
			case UIMAGECUBE:
			case UIMAGECUBEARRAY:
			case UINT:
			case USAMPLER1D:
			case USAMPLER1DARRAY:
			case USAMPLER2D:
			case USAMPLER2DARRAY:
			case USAMPLER2DMS:
			case USAMPLER2DMSARRAY:
			case USAMPLER2DRECT:
			case USAMPLER3D:
			case USAMPLERBUFFER:
			case USAMPLERCUBE:
			case USAMPLERCUBEARRAY:
			case UVEC2:
			case UVEC3:
			case UVEC4:
			case VEC2:
			case VEC3:
			case VEC4:
			case VOID:
			case BANG:
			case DASH:
			case DEC_OP:
			case INC_OP:
			case LEFT_PAREN:
			case PLUS:
			case TILDE:
			case DOUBLECONSTANT:
			case FLOATCONSTANT:
			case INTCONSTANT:
			case UINTCONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710;
				expression(0);
				State = 711;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GLSLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selection_rest_statementContext selection_rest_statement() {
			return GetRuleContext<Selection_rest_statementContext>(0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(Context, State);
		EnterRule(_localctx, 116, RULE_selection_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			Match(IF);
			State = 716;
			Match(LEFT_PAREN);
			State = 717;
			expression(0);
			State = 718;
			Match(RIGHT_PAREN);
			State = 719;
			selection_rest_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_rest_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(GLSLParser.ELSE, 0); }
		public Selection_rest_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_rest_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_rest_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_rest_statementContext selection_rest_statement() {
		Selection_rest_statementContext _localctx = new Selection_rest_statementContext(Context, State);
		EnterRule(_localctx, 118, RULE_selection_rest_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			statement();
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 722;
				Match(ELSE);
				State = 723;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fully_specified_typeContext fully_specified_type() {
			return GetRuleContext<Fully_specified_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GLSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(GLSLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 120, RULE_condition);
		try {
			State = 732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 726;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 727;
				fully_specified_type();
				State = 728;
				Match(IDENTIFIER);
				State = 729;
				Match(EQUAL);
				State = 730;
				initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(GLSLParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(GLSLParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(GLSLParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 122, RULE_switch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			Match(SWITCH);
			State = 735;
			Match(LEFT_PAREN);
			State = 736;
			expression(0);
			State = 737;
			Match(RIGHT_PAREN);
			State = 738;
			Match(LEFT_BRACE);
			State = 740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8589934594L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9007199321841665L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4503599493205759L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 2171300179101648895L) != 0) || _la==IDENTIFIER) {
				{
				State = 739;
				statement_list();
				}
			}

			State = 742;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GLSLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GLSLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GLSLParser.DEFAULT, 0); }
		public Case_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_labelContext case_label() {
		Case_labelContext _localctx = new Case_labelContext(Context, State);
		EnterRule(_localctx, 124, RULE_case_label);
		try {
			State = 750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 744;
				Match(CASE);
				State = 745;
				expression(0);
				State = 746;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748;
				Match(DEFAULT);
				State = 749;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(GLSLParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_no_new_scopeContext statement_no_new_scope() {
			return GetRuleContext<Statement_no_new_scopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(GLSLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GLSLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(GLSLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_init_statementContext for_init_statement() {
			return GetRuleContext<For_init_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_rest_statementContext for_rest_statement() {
			return GetRuleContext<For_rest_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 126, RULE_iteration_statement);
		try {
			State = 773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 752;
				Match(WHILE);
				State = 753;
				Match(LEFT_PAREN);
				State = 754;
				condition();
				State = 755;
				Match(RIGHT_PAREN);
				State = 756;
				statement_no_new_scope();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 758;
				Match(DO);
				State = 759;
				statement();
				State = 760;
				Match(WHILE);
				State = 761;
				Match(LEFT_PAREN);
				State = 762;
				expression(0);
				State = 763;
				Match(RIGHT_PAREN);
				State = 764;
				Match(SEMICOLON);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 766;
				Match(FOR);
				State = 767;
				Match(LEFT_PAREN);
				State = 768;
				for_init_statement();
				State = 769;
				for_rest_statement();
				State = 770;
				Match(RIGHT_PAREN);
				State = 771;
				statement_no_new_scope();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_init_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		public For_init_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_init_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_init_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_init_statementContext for_init_statement() {
		For_init_statementContext _localctx = new For_init_statementContext(Context, State);
		EnterRule(_localctx, 128, RULE_for_init_statement);
		try {
			State = 777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 775;
				expression_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 776;
				declaration_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_rest_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GLSLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_rest_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_rest_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_rest_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_rest_statementContext for_rest_statement() {
		For_rest_statementContext _localctx = new For_rest_statementContext(Context, State);
		EnterRule(_localctx, 130, RULE_for_rest_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -696053195282L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -11540474112237569L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4503599493172991L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 2170737228074485247L) != 0) || _la==IDENTIFIER) {
				{
				State = 779;
				condition();
				}
			}

			State = 782;
			Match(SEMICOLON);
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -6917529530286505755L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -4501401023543297L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -9222246411859393985L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & -8138003422817533829L) != 0)) {
				{
				State = 783;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(GLSLParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GLSLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(GLSLParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(GLSLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(GLSLParser.DISCARD, 0); }
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 132, RULE_jump_statement);
		int _la;
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 786;
				Match(CONTINUE);
				State = 787;
				Match(SEMICOLON);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 788;
				Match(BREAK);
				State = 789;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 790;
				Match(RETURN);
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -6917529530286505755L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -4501401023543297L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -9222246411859393985L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & -8138003422817533829L) != 0)) {
					{
					State = 791;
					expression(0);
					}
				}

				State = 794;
				Match(SEMICOLON);
				}
				break;
			case DISCARD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 795;
				Match(DISCARD);
				State = 796;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GLSLParser.SEMICOLON, 0); }
		public External_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_declarationContext external_declaration() {
		External_declarationContext _localctx = new External_declarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_external_declaration);
		try {
			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 799;
				function_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 800;
				declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 801;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_prototypeContext function_prototype() {
			return GetRuleContext<Function_prototypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statement_no_new_scopeContext compound_statement_no_new_scope() {
			return GetRuleContext<Compound_statement_no_new_scopeContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLParserVisitor<TResult> typedVisitor = visitor as IGLSLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 136, RULE_function_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			function_prototype();
			State = 805;
			compound_statement_no_new_scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return postfix_expression_sempred((Postfix_expressionContext)_localctx, predIndex);
		case 13: return binary_expression_sempred((Binary_expressionContext)_localctx, predIndex);
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool postfix_expression_sempred(Postfix_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool binary_expression_sempred(Binary_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		case 14: return Precpred(Context, 2);
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,307,808,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,5,0,140,8,0,10,0,
		12,0,143,9,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,160,8,2,1,3,1,3,1,3,1,3,1,3,3,3,167,8,3,1,3,1,3,3,3,171,8,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,181,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,5,3,191,8,3,10,3,12,3,194,9,3,1,4,1,4,3,4,198,8,4,1,5,1,5,1,6,1,6,1,
		6,3,6,205,8,6,1,6,1,6,1,7,1,7,3,7,211,8,7,1,8,1,8,1,8,5,8,216,8,8,10,8,
		12,8,219,9,8,1,8,3,8,222,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,232,8,
		9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,241,8,11,1,12,1,12,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,5,13,281,8,13,10,13,12,13,284,9,13,1,14,
		1,14,1,14,1,14,1,14,1,14,5,14,292,8,14,10,14,12,14,295,9,14,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,3,15,304,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,324,8,16,
		3,16,326,8,16,1,16,1,16,1,16,1,16,3,16,332,8,16,1,16,1,16,3,16,336,8,16,
		1,17,1,17,1,17,5,17,341,8,17,10,17,12,17,344,9,17,1,18,1,18,1,18,1,18,
		3,18,350,8,18,1,18,1,18,1,19,1,19,1,19,5,19,357,8,19,10,19,12,19,360,9,
		19,1,20,1,20,1,20,3,20,365,8,20,1,21,1,21,1,21,3,21,370,8,21,1,21,1,21,
		3,21,374,8,21,1,22,1,22,1,23,1,23,1,23,5,23,381,8,23,10,23,12,23,384,9,
		23,1,24,1,24,3,24,388,8,24,1,25,1,25,3,25,392,8,25,1,25,1,25,3,25,396,
		8,25,1,26,1,26,1,26,1,26,3,26,402,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
		29,1,29,1,29,1,30,1,30,1,30,5,30,416,8,30,10,30,12,30,419,9,30,1,31,1,
		31,1,31,3,31,424,8,31,1,31,3,31,427,8,31,1,32,1,32,1,33,4,33,432,8,33,
		11,33,12,33,433,1,34,1,34,1,34,1,34,1,34,1,34,3,34,442,8,34,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,3,35,464,8,35,1,35,1,35,3,35,468,8,35,1,36,1,36,1,
		36,5,36,473,8,36,10,36,12,36,476,9,36,1,37,1,37,1,38,1,38,3,38,482,8,38,
		1,39,4,39,485,8,39,11,39,12,39,486,1,40,1,40,3,40,491,8,40,1,40,1,40,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,616,8,41,1,42,1,42,1,43,
		1,43,3,43,622,8,43,1,43,1,43,1,43,1,43,1,44,4,44,629,8,44,11,44,12,44,
		630,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,642,8,45,1,46,1,
		46,1,46,5,46,647,8,46,10,46,12,46,650,9,46,1,47,1,47,3,47,654,8,47,1,48,
		1,48,1,48,1,48,3,48,660,8,48,1,48,1,48,3,48,664,8,48,1,49,1,49,1,49,5,
		49,669,8,49,10,49,12,49,672,9,49,1,50,1,50,1,51,1,51,3,51,678,8,51,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,3,52,687,8,52,1,53,1,53,3,53,691,8,53,1,
		53,1,53,1,54,1,54,3,54,697,8,54,1,55,1,55,3,55,701,8,55,1,55,1,55,1,56,
		4,56,706,8,56,11,56,12,56,707,1,57,1,57,1,57,1,57,3,57,714,8,57,1,58,1,
		58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,3,59,725,8,59,1,60,1,60,1,60,1,60,
		1,60,1,60,3,60,733,8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,741,8,61,1,
		61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,3,62,751,8,62,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,3,63,774,8,63,1,64,1,64,3,64,778,8,64,1,65,3,65,781,8,65,
		1,65,1,65,3,65,785,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,793,8,66,1,
		66,1,66,1,66,3,66,798,8,66,1,67,1,67,1,67,3,67,803,8,67,1,68,1,68,1,68,
		1,68,0,3,6,26,28,69,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,0,9,4,0,208,208,212,212,234,234,246,246,10,0,204,
		204,206,206,214,214,217,217,222,222,227,228,231,231,237,237,245,245,248,
		248,2,0,233,233,243,244,2,0,212,212,234,234,2,0,225,225,240,240,3,0,218,
		218,220,221,236,236,2,0,216,216,229,229,3,0,35,35,108,108,138,138,3,0,
		38,38,94,94,107,107,981,0,141,1,0,0,0,2,146,1,0,0,0,4,159,1,0,0,0,6,170,
		1,0,0,0,8,197,1,0,0,0,10,199,1,0,0,0,12,201,1,0,0,0,14,210,1,0,0,0,16,
		221,1,0,0,0,18,231,1,0,0,0,20,233,1,0,0,0,22,240,1,0,0,0,24,242,1,0,0,
		0,26,244,1,0,0,0,28,285,1,0,0,0,30,303,1,0,0,0,32,335,1,0,0,0,34,337,1,
		0,0,0,36,345,1,0,0,0,38,353,1,0,0,0,40,361,1,0,0,0,42,373,1,0,0,0,44,375,
		1,0,0,0,46,377,1,0,0,0,48,385,1,0,0,0,50,389,1,0,0,0,52,401,1,0,0,0,54,
		403,1,0,0,0,56,405,1,0,0,0,58,407,1,0,0,0,60,412,1,0,0,0,62,426,1,0,0,
		0,64,428,1,0,0,0,66,431,1,0,0,0,68,441,1,0,0,0,70,467,1,0,0,0,72,469,1,
		0,0,0,74,477,1,0,0,0,76,479,1,0,0,0,78,484,1,0,0,0,80,488,1,0,0,0,82,615,
		1,0,0,0,84,617,1,0,0,0,86,619,1,0,0,0,88,628,1,0,0,0,90,641,1,0,0,0,92,
		643,1,0,0,0,94,651,1,0,0,0,96,663,1,0,0,0,98,665,1,0,0,0,100,673,1,0,0,
		0,102,677,1,0,0,0,104,686,1,0,0,0,106,688,1,0,0,0,108,696,1,0,0,0,110,
		698,1,0,0,0,112,705,1,0,0,0,114,713,1,0,0,0,116,715,1,0,0,0,118,721,1,
		0,0,0,120,732,1,0,0,0,122,734,1,0,0,0,124,750,1,0,0,0,126,773,1,0,0,0,
		128,777,1,0,0,0,130,780,1,0,0,0,132,797,1,0,0,0,134,802,1,0,0,0,136,804,
		1,0,0,0,138,140,3,134,67,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,
		0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,5,0,0,1,145,
		1,1,0,0,0,146,147,5,257,0,0,147,3,1,0,0,0,148,160,3,2,1,0,149,160,5,155,
		0,0,150,160,5,34,0,0,151,160,5,252,0,0,152,160,5,253,0,0,153,160,5,251,
		0,0,154,160,5,250,0,0,155,156,5,226,0,0,156,157,3,28,14,0,157,158,5,241,
		0,0,158,160,1,0,0,0,159,148,1,0,0,0,159,149,1,0,0,0,159,150,1,0,0,0,159,
		151,1,0,0,0,159,152,1,0,0,0,159,153,1,0,0,0,159,154,1,0,0,0,159,155,1,
		0,0,0,160,5,1,0,0,0,161,162,6,3,-1,0,162,171,3,4,2,0,163,164,3,76,38,0,
		164,166,5,226,0,0,165,167,3,16,8,0,166,165,1,0,0,0,166,167,1,0,0,0,167,
		168,1,0,0,0,168,169,5,241,0,0,169,171,1,0,0,0,170,161,1,0,0,0,170,163,
		1,0,0,0,171,192,1,0,0,0,172,173,10,6,0,0,173,174,5,224,0,0,174,175,3,10,
		5,0,175,176,5,239,0,0,176,191,1,0,0,0,177,178,10,5,0,0,178,180,5,226,0,
		0,179,181,3,16,8,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,
		191,5,241,0,0,183,184,10,3,0,0,184,185,5,215,0,0,185,191,3,8,4,0,186,187,
		10,2,0,0,187,191,5,219,0,0,188,189,10,1,0,0,189,191,5,213,0,0,190,172,
		1,0,0,0,190,177,1,0,0,0,190,183,1,0,0,0,190,186,1,0,0,0,190,188,1,0,0,
		0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,7,1,0,0,0,194,192,
		1,0,0,0,195,198,3,2,1,0,196,198,3,12,6,0,197,195,1,0,0,0,197,196,1,0,0,
		0,198,9,1,0,0,0,199,200,3,28,14,0,200,11,1,0,0,0,201,202,3,14,7,0,202,
		204,5,226,0,0,203,205,3,16,8,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,
		1,0,0,0,206,207,5,241,0,0,207,13,1,0,0,0,208,211,3,76,38,0,209,211,3,6,
		3,0,210,208,1,0,0,0,210,209,1,0,0,0,211,15,1,0,0,0,212,217,3,22,11,0,213,
		214,5,211,0,0,214,216,3,22,11,0,215,213,1,0,0,0,216,219,1,0,0,0,217,215,
		1,0,0,0,217,218,1,0,0,0,218,222,1,0,0,0,219,217,1,0,0,0,220,222,5,200,
		0,0,221,212,1,0,0,0,221,220,1,0,0,0,222,17,1,0,0,0,223,232,3,6,3,0,224,
		225,5,219,0,0,225,232,3,18,9,0,226,227,5,213,0,0,227,232,3,18,9,0,228,
		229,3,20,10,0,229,230,3,18,9,0,230,232,1,0,0,0,231,223,1,0,0,0,231,224,
		1,0,0,0,231,226,1,0,0,0,231,228,1,0,0,0,232,19,1,0,0,0,233,234,7,0,0,0,
		234,21,1,0,0,0,235,241,3,30,15,0,236,237,3,18,9,0,237,238,3,24,12,0,238,
		239,3,22,11,0,239,241,1,0,0,0,240,235,1,0,0,0,240,236,1,0,0,0,241,23,1,
		0,0,0,242,243,7,1,0,0,243,25,1,0,0,0,244,245,6,13,-1,0,245,246,3,18,9,
		0,246,282,1,0,0,0,247,248,10,11,0,0,248,249,7,2,0,0,249,281,3,26,13,12,
		250,251,10,10,0,0,251,252,7,3,0,0,252,281,3,26,13,11,253,254,10,9,0,0,
		254,255,7,4,0,0,255,281,3,26,13,10,256,257,10,8,0,0,257,258,7,5,0,0,258,
		281,3,26,13,9,259,260,10,7,0,0,260,261,7,6,0,0,261,281,3,26,13,8,262,263,
		10,6,0,0,263,264,5,205,0,0,264,281,3,26,13,7,265,266,10,5,0,0,266,267,
		5,209,0,0,267,281,3,26,13,6,268,269,10,4,0,0,269,270,5,247,0,0,270,281,
		3,26,13,5,271,272,10,3,0,0,272,273,5,207,0,0,273,281,3,26,13,4,274,275,
		10,2,0,0,275,276,5,249,0,0,276,281,3,26,13,3,277,278,10,1,0,0,278,279,
		5,232,0,0,279,281,3,26,13,2,280,247,1,0,0,0,280,250,1,0,0,0,280,253,1,
		0,0,0,280,256,1,0,0,0,280,259,1,0,0,0,280,262,1,0,0,0,280,265,1,0,0,0,
		280,268,1,0,0,0,280,271,1,0,0,0,280,274,1,0,0,0,280,277,1,0,0,0,281,284,
		1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,27,1,0,0,0,284,282,1,0,0,0,
		285,286,6,14,-1,0,286,287,3,22,11,0,287,293,1,0,0,0,288,289,10,1,0,0,289,
		290,5,211,0,0,290,292,3,22,11,0,291,288,1,0,0,0,292,295,1,0,0,0,293,291,
		1,0,0,0,293,294,1,0,0,0,294,29,1,0,0,0,295,293,1,0,0,0,296,304,3,26,13,
		0,297,298,3,26,13,0,298,299,5,235,0,0,299,300,3,28,14,0,300,301,5,210,
		0,0,301,302,3,22,11,0,302,304,1,0,0,0,303,296,1,0,0,0,303,297,1,0,0,0,
		304,31,1,0,0,0,305,306,3,36,18,0,306,307,5,242,0,0,307,336,1,0,0,0,308,
		309,3,46,23,0,309,310,5,242,0,0,310,336,1,0,0,0,311,312,5,112,0,0,312,
		313,3,84,42,0,313,314,3,76,38,0,314,315,5,242,0,0,315,336,1,0,0,0,316,
		317,3,66,33,0,317,318,5,257,0,0,318,319,5,223,0,0,319,320,3,88,44,0,320,
		325,5,238,0,0,321,323,5,257,0,0,322,324,3,78,39,0,323,322,1,0,0,0,323,
		324,1,0,0,0,324,326,1,0,0,0,325,321,1,0,0,0,325,326,1,0,0,0,326,327,1,
		0,0,0,327,328,5,242,0,0,328,336,1,0,0,0,329,331,3,66,33,0,330,332,3,34,
		17,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,5,242,0,0,
		334,336,1,0,0,0,335,305,1,0,0,0,335,308,1,0,0,0,335,311,1,0,0,0,335,316,
		1,0,0,0,335,329,1,0,0,0,336,33,1,0,0,0,337,342,5,257,0,0,338,339,5,211,
		0,0,339,341,5,257,0,0,340,338,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,
		342,343,1,0,0,0,343,35,1,0,0,0,344,342,1,0,0,0,345,346,3,52,26,0,346,347,
		5,257,0,0,347,349,5,226,0,0,348,350,3,38,19,0,349,348,1,0,0,0,349,350,
		1,0,0,0,350,351,1,0,0,0,351,352,5,241,0,0,352,37,1,0,0,0,353,358,3,42,
		21,0,354,355,5,211,0,0,355,357,3,42,21,0,356,354,1,0,0,0,357,360,1,0,0,
		0,358,356,1,0,0,0,358,359,1,0,0,0,359,39,1,0,0,0,360,358,1,0,0,0,361,362,
		3,76,38,0,362,364,5,257,0,0,363,365,3,78,39,0,364,363,1,0,0,0,364,365,
		1,0,0,0,365,41,1,0,0,0,366,369,3,66,33,0,367,370,3,40,20,0,368,370,3,44,
		22,0,369,367,1,0,0,0,369,368,1,0,0,0,370,374,1,0,0,0,371,374,3,40,20,0,
		372,374,3,44,22,0,373,366,1,0,0,0,373,371,1,0,0,0,373,372,1,0,0,0,374,
		43,1,0,0,0,375,376,3,76,38,0,376,45,1,0,0,0,377,382,3,48,24,0,378,379,
		5,211,0,0,379,381,3,50,25,0,380,378,1,0,0,0,381,384,1,0,0,0,382,380,1,
		0,0,0,382,383,1,0,0,0,383,47,1,0,0,0,384,382,1,0,0,0,385,387,3,52,26,0,
		386,388,3,50,25,0,387,386,1,0,0,0,387,388,1,0,0,0,388,49,1,0,0,0,389,391,
		5,257,0,0,390,392,3,78,39,0,391,390,1,0,0,0,391,392,1,0,0,0,392,395,1,
		0,0,0,393,394,5,217,0,0,394,396,3,96,48,0,395,393,1,0,0,0,395,396,1,0,
		0,0,396,51,1,0,0,0,397,402,3,76,38,0,398,399,3,66,33,0,399,400,3,76,38,
		0,400,402,1,0,0,0,401,397,1,0,0,0,401,398,1,0,0,0,402,53,1,0,0,0,403,404,
		5,65,0,0,404,55,1,0,0,0,405,406,7,7,0,0,406,57,1,0,0,0,407,408,5,93,0,
		0,408,409,5,226,0,0,409,410,3,60,30,0,410,411,5,241,0,0,411,59,1,0,0,0,
		412,417,3,62,31,0,413,414,5,211,0,0,414,416,3,62,31,0,415,413,1,0,0,0,
		416,419,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,61,1,0,0,0,419,417,
		1,0,0,0,420,423,5,257,0,0,421,422,5,217,0,0,422,424,3,30,15,0,423,421,
		1,0,0,0,423,424,1,0,0,0,424,427,1,0,0,0,425,427,5,137,0,0,426,420,1,0,
		0,0,426,425,1,0,0,0,427,63,1,0,0,0,428,429,5,111,0,0,429,65,1,0,0,0,430,
		432,3,68,34,0,431,430,1,0,0,0,432,433,1,0,0,0,433,431,1,0,0,0,433,434,
		1,0,0,0,434,67,1,0,0,0,435,442,3,70,35,0,436,442,3,58,29,0,437,442,3,84,
		42,0,438,442,3,56,28,0,439,442,3,54,27,0,440,442,3,64,32,0,441,435,1,0,
		0,0,441,436,1,0,0,0,441,437,1,0,0,0,441,438,1,0,0,0,441,439,1,0,0,0,441,
		440,1,0,0,0,442,69,1,0,0,0,443,468,5,12,0,0,444,468,5,62,0,0,445,468,5,
		109,0,0,446,468,5,63,0,0,447,468,5,10,0,0,448,468,5,110,0,0,449,468,5,
		116,0,0,450,468,5,168,0,0,451,468,5,5,0,0,452,468,5,137,0,0,453,468,5,
		11,0,0,454,468,5,201,0,0,455,468,5,114,0,0,456,468,5,113,0,0,457,468,5,
		203,0,0,458,463,5,142,0,0,459,460,5,226,0,0,460,461,3,72,36,0,461,462,
		5,241,0,0,462,464,1,0,0,0,463,459,1,0,0,0,463,464,1,0,0,0,464,468,1,0,
		0,0,465,468,5,2,0,0,466,468,5,196,0,0,467,443,1,0,0,0,467,444,1,0,0,0,
		467,445,1,0,0,0,467,446,1,0,0,0,467,447,1,0,0,0,467,448,1,0,0,0,467,449,
		1,0,0,0,467,450,1,0,0,0,467,451,1,0,0,0,467,452,1,0,0,0,467,453,1,0,0,
		0,467,454,1,0,0,0,467,455,1,0,0,0,467,456,1,0,0,0,467,457,1,0,0,0,467,
		458,1,0,0,0,467,465,1,0,0,0,467,466,1,0,0,0,468,71,1,0,0,0,469,474,3,74,
		37,0,470,471,5,211,0,0,471,473,3,74,37,0,472,470,1,0,0,0,473,476,1,0,0,
		0,474,472,1,0,0,0,474,475,1,0,0,0,475,73,1,0,0,0,476,474,1,0,0,0,477,478,
		5,257,0,0,478,75,1,0,0,0,479,481,3,82,41,0,480,482,3,78,39,0,481,480,1,
		0,0,0,481,482,1,0,0,0,482,77,1,0,0,0,483,485,3,80,40,0,484,483,1,0,0,0,
		485,486,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,79,1,0,0,0,488,490,
		5,224,0,0,489,491,3,30,15,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,
		0,0,0,492,493,5,239,0,0,493,81,1,0,0,0,494,616,5,200,0,0,495,616,5,36,
		0,0,496,616,5,29,0,0,497,616,5,64,0,0,498,616,5,167,0,0,499,616,5,3,0,
		0,500,616,5,197,0,0,501,616,5,198,0,0,502,616,5,199,0,0,503,616,5,30,0,
		0,504,616,5,31,0,0,505,616,5,32,0,0,506,616,5,6,0,0,507,616,5,7,0,0,508,
		616,5,8,0,0,509,616,5,90,0,0,510,616,5,91,0,0,511,616,5,92,0,0,512,616,
		5,193,0,0,513,616,5,194,0,0,514,616,5,195,0,0,515,616,5,95,0,0,516,616,
		5,99,0,0,517,616,5,103,0,0,518,616,5,96,0,0,519,616,5,97,0,0,520,616,5,
		98,0,0,521,616,5,100,0,0,522,616,5,101,0,0,523,616,5,102,0,0,524,616,5,
		104,0,0,525,616,5,105,0,0,526,616,5,106,0,0,527,616,5,16,0,0,528,616,5,
		20,0,0,529,616,5,24,0,0,530,616,5,17,0,0,531,616,5,18,0,0,532,616,5,19,
		0,0,533,616,5,21,0,0,534,616,5,22,0,0,535,616,5,23,0,0,536,616,5,25,0,
		0,537,616,5,26,0,0,538,616,5,27,0,0,539,616,5,1,0,0,540,616,5,122,0,0,
		541,616,5,130,0,0,542,616,5,132,0,0,543,616,5,129,0,0,544,616,5,135,0,
		0,545,616,5,123,0,0,546,616,5,124,0,0,547,616,5,133,0,0,548,616,5,134,
		0,0,549,616,5,68,0,0,550,616,5,73,0,0,551,616,5,75,0,0,552,616,5,69,0,
		0,553,616,5,76,0,0,554,616,5,171,0,0,555,616,5,176,0,0,556,616,5,178,0,
		0,557,616,5,172,0,0,558,616,5,179,0,0,559,616,5,118,0,0,560,616,5,121,
		0,0,561,616,5,119,0,0,562,616,5,120,0,0,563,616,5,66,0,0,564,616,5,67,
		0,0,565,616,5,169,0,0,566,616,5,170,0,0,567,616,5,127,0,0,568,616,5,128,
		0,0,569,616,5,72,0,0,570,616,5,175,0,0,571,616,5,131,0,0,572,616,5,74,
		0,0,573,616,5,177,0,0,574,616,5,125,0,0,575,616,5,70,0,0,576,616,5,173,
		0,0,577,616,5,126,0,0,578,616,5,71,0,0,579,616,5,174,0,0,580,616,5,53,
		0,0,581,616,5,42,0,0,582,616,5,158,0,0,583,616,5,58,0,0,584,616,5,47,0,
		0,585,616,5,163,0,0,586,616,5,60,0,0,587,616,5,49,0,0,588,616,5,165,0,
		0,589,616,5,59,0,0,590,616,5,48,0,0,591,616,5,164,0,0,592,616,5,51,0,0,
		593,616,5,40,0,0,594,616,5,156,0,0,595,616,5,52,0,0,596,616,5,41,0,0,597,
		616,5,157,0,0,598,616,5,57,0,0,599,616,5,46,0,0,600,616,5,162,0,0,601,
		616,5,54,0,0,602,616,5,43,0,0,603,616,5,159,0,0,604,616,5,61,0,0,605,616,
		5,50,0,0,606,616,5,166,0,0,607,616,5,55,0,0,608,616,5,44,0,0,609,616,5,
		160,0,0,610,616,5,56,0,0,611,616,5,45,0,0,612,616,5,161,0,0,613,616,3,
		86,43,0,614,616,3,74,37,0,615,494,1,0,0,0,615,495,1,0,0,0,615,496,1,0,
		0,0,615,497,1,0,0,0,615,498,1,0,0,0,615,499,1,0,0,0,615,500,1,0,0,0,615,
		501,1,0,0,0,615,502,1,0,0,0,615,503,1,0,0,0,615,504,1,0,0,0,615,505,1,
		0,0,0,615,506,1,0,0,0,615,507,1,0,0,0,615,508,1,0,0,0,615,509,1,0,0,0,
		615,510,1,0,0,0,615,511,1,0,0,0,615,512,1,0,0,0,615,513,1,0,0,0,615,514,
		1,0,0,0,615,515,1,0,0,0,615,516,1,0,0,0,615,517,1,0,0,0,615,518,1,0,0,
		0,615,519,1,0,0,0,615,520,1,0,0,0,615,521,1,0,0,0,615,522,1,0,0,0,615,
		523,1,0,0,0,615,524,1,0,0,0,615,525,1,0,0,0,615,526,1,0,0,0,615,527,1,
		0,0,0,615,528,1,0,0,0,615,529,1,0,0,0,615,530,1,0,0,0,615,531,1,0,0,0,
		615,532,1,0,0,0,615,533,1,0,0,0,615,534,1,0,0,0,615,535,1,0,0,0,615,536,
		1,0,0,0,615,537,1,0,0,0,615,538,1,0,0,0,615,539,1,0,0,0,615,540,1,0,0,
		0,615,541,1,0,0,0,615,542,1,0,0,0,615,543,1,0,0,0,615,544,1,0,0,0,615,
		545,1,0,0,0,615,546,1,0,0,0,615,547,1,0,0,0,615,548,1,0,0,0,615,549,1,
		0,0,0,615,550,1,0,0,0,615,551,1,0,0,0,615,552,1,0,0,0,615,553,1,0,0,0,
		615,554,1,0,0,0,615,555,1,0,0,0,615,556,1,0,0,0,615,557,1,0,0,0,615,558,
		1,0,0,0,615,559,1,0,0,0,615,560,1,0,0,0,615,561,1,0,0,0,615,562,1,0,0,
		0,615,563,1,0,0,0,615,564,1,0,0,0,615,565,1,0,0,0,615,566,1,0,0,0,615,
		567,1,0,0,0,615,568,1,0,0,0,615,569,1,0,0,0,615,570,1,0,0,0,615,571,1,
		0,0,0,615,572,1,0,0,0,615,573,1,0,0,0,615,574,1,0,0,0,615,575,1,0,0,0,
		615,576,1,0,0,0,615,577,1,0,0,0,615,578,1,0,0,0,615,579,1,0,0,0,615,580,
		1,0,0,0,615,581,1,0,0,0,615,582,1,0,0,0,615,583,1,0,0,0,615,584,1,0,0,
		0,615,585,1,0,0,0,615,586,1,0,0,0,615,587,1,0,0,0,615,588,1,0,0,0,615,
		589,1,0,0,0,615,590,1,0,0,0,615,591,1,0,0,0,615,592,1,0,0,0,615,593,1,
		0,0,0,615,594,1,0,0,0,615,595,1,0,0,0,615,596,1,0,0,0,615,597,1,0,0,0,
		615,598,1,0,0,0,615,599,1,0,0,0,615,600,1,0,0,0,615,601,1,0,0,0,615,602,
		1,0,0,0,615,603,1,0,0,0,615,604,1,0,0,0,615,605,1,0,0,0,615,606,1,0,0,
		0,615,607,1,0,0,0,615,608,1,0,0,0,615,609,1,0,0,0,615,610,1,0,0,0,615,
		611,1,0,0,0,615,612,1,0,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,83,1,0,
		0,0,617,618,7,8,0,0,618,85,1,0,0,0,619,621,5,139,0,0,620,622,5,257,0,0,
		621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,5,223,0,0,624,
		625,3,88,44,0,625,626,5,238,0,0,626,87,1,0,0,0,627,629,3,90,45,0,628,627,
		1,0,0,0,629,630,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,89,1,0,0,0,
		632,633,3,76,38,0,633,634,3,92,46,0,634,635,5,242,0,0,635,642,1,0,0,0,
		636,637,3,66,33,0,637,638,3,76,38,0,638,639,3,92,46,0,639,640,5,242,0,
		0,640,642,1,0,0,0,641,632,1,0,0,0,641,636,1,0,0,0,642,91,1,0,0,0,643,648,
		3,94,47,0,644,645,5,211,0,0,645,647,3,94,47,0,646,644,1,0,0,0,647,650,
		1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,93,1,0,0,0,650,648,1,0,0,0,
		651,653,5,257,0,0,652,654,3,78,39,0,653,652,1,0,0,0,653,654,1,0,0,0,654,
		95,1,0,0,0,655,664,3,22,11,0,656,657,5,223,0,0,657,659,3,98,49,0,658,660,
		5,211,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,662,5,238,
		0,0,662,664,1,0,0,0,663,655,1,0,0,0,663,656,1,0,0,0,664,97,1,0,0,0,665,
		670,3,96,48,0,666,667,5,211,0,0,667,669,3,96,48,0,668,666,1,0,0,0,669,
		672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,99,1,0,0,0,672,670,1,0,
		0,0,673,674,3,32,16,0,674,101,1,0,0,0,675,678,3,106,53,0,676,678,3,104,
		52,0,677,675,1,0,0,0,677,676,1,0,0,0,678,103,1,0,0,0,679,687,3,100,50,
		0,680,687,3,114,57,0,681,687,3,116,58,0,682,687,3,122,61,0,683,687,3,124,
		62,0,684,687,3,126,63,0,685,687,3,132,66,0,686,679,1,0,0,0,686,680,1,0,
		0,0,686,681,1,0,0,0,686,682,1,0,0,0,686,683,1,0,0,0,686,684,1,0,0,0,686,
		685,1,0,0,0,687,105,1,0,0,0,688,690,5,223,0,0,689,691,3,112,56,0,690,689,
		1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,5,238,0,0,693,107,1,0,
		0,0,694,697,3,110,55,0,695,697,3,104,52,0,696,694,1,0,0,0,696,695,1,0,
		0,0,697,109,1,0,0,0,698,700,5,223,0,0,699,701,3,112,56,0,700,699,1,0,0,
		0,700,701,1,0,0,0,701,702,1,0,0,0,702,703,5,238,0,0,703,111,1,0,0,0,704,
		706,3,102,51,0,705,704,1,0,0,0,706,707,1,0,0,0,707,705,1,0,0,0,707,708,
		1,0,0,0,708,113,1,0,0,0,709,714,5,242,0,0,710,711,3,28,14,0,711,712,5,
		242,0,0,712,714,1,0,0,0,713,709,1,0,0,0,713,710,1,0,0,0,714,115,1,0,0,
		0,715,716,5,39,0,0,716,717,5,226,0,0,717,718,3,28,14,0,718,719,5,241,0,
		0,719,720,3,118,59,0,720,117,1,0,0,0,721,724,3,102,51,0,722,723,5,33,0,
		0,723,725,3,102,51,0,724,722,1,0,0,0,724,725,1,0,0,0,725,119,1,0,0,0,726,
		733,3,28,14,0,727,728,3,52,26,0,728,729,5,257,0,0,729,730,5,217,0,0,730,
		731,3,96,48,0,731,733,1,0,0,0,732,726,1,0,0,0,732,727,1,0,0,0,733,121,
		1,0,0,0,734,735,5,143,0,0,735,736,5,226,0,0,736,737,3,28,14,0,737,738,
		5,241,0,0,738,740,5,223,0,0,739,741,3,112,56,0,740,739,1,0,0,0,740,741,
		1,0,0,0,741,742,1,0,0,0,742,743,5,238,0,0,743,123,1,0,0,0,744,745,5,9,
		0,0,745,746,3,28,14,0,746,747,5,210,0,0,747,751,1,0,0,0,748,749,5,14,0,
		0,749,751,5,210,0,0,750,744,1,0,0,0,750,748,1,0,0,0,751,125,1,0,0,0,752,
		753,5,202,0,0,753,754,5,226,0,0,754,755,3,120,60,0,755,756,5,241,0,0,756,
		757,3,108,54,0,757,774,1,0,0,0,758,759,5,28,0,0,759,760,3,102,51,0,760,
		761,5,202,0,0,761,762,5,226,0,0,762,763,3,28,14,0,763,764,5,241,0,0,764,
		765,5,242,0,0,765,774,1,0,0,0,766,767,5,37,0,0,767,768,5,226,0,0,768,769,
		3,128,64,0,769,770,3,130,65,0,770,771,5,241,0,0,771,772,3,108,54,0,772,
		774,1,0,0,0,773,752,1,0,0,0,773,758,1,0,0,0,773,766,1,0,0,0,774,127,1,
		0,0,0,775,778,3,114,57,0,776,778,3,100,50,0,777,775,1,0,0,0,777,776,1,
		0,0,0,778,129,1,0,0,0,779,781,3,120,60,0,780,779,1,0,0,0,780,781,1,0,0,
		0,781,782,1,0,0,0,782,784,5,242,0,0,783,785,3,28,14,0,784,783,1,0,0,0,
		784,785,1,0,0,0,785,131,1,0,0,0,786,787,5,13,0,0,787,798,5,242,0,0,788,
		789,5,4,0,0,789,798,5,242,0,0,790,792,5,115,0,0,791,793,3,28,14,0,792,
		791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,798,5,242,0,0,795,796,
		5,15,0,0,796,798,5,242,0,0,797,786,1,0,0,0,797,788,1,0,0,0,797,790,1,0,
		0,0,797,795,1,0,0,0,798,133,1,0,0,0,799,803,3,136,68,0,800,803,3,32,16,
		0,801,803,5,242,0,0,802,799,1,0,0,0,802,800,1,0,0,0,802,801,1,0,0,0,803,
		135,1,0,0,0,804,805,3,36,18,0,805,806,3,110,55,0,806,137,1,0,0,0,71,141,
		159,166,170,180,190,192,197,204,210,217,221,231,240,280,282,293,303,323,
		325,331,335,342,349,358,364,369,373,382,387,391,395,401,417,423,426,433,
		441,463,467,474,481,486,490,615,621,630,641,648,653,659,663,670,677,686,
		690,696,700,707,713,724,732,740,750,773,777,780,784,792,797,802
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HereticalSolutions.HereticalEngine.Grammars
