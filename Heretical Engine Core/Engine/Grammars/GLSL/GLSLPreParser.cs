//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /SSD1/Repositories/C#/Heretical Engine/Heretical Engine Core/Engine/Grammars/GLSL/GLSLPreParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HereticalSolutions.HereticalEngine.Grammars {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GLSLPreParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ATOMIC_UINT=1, ATTRIBUTE=2, BOOL=3, BREAK=4, BUFFER=5, BVEC2=6, BVEC3=7, 
		BVEC4=8, CASE=9, CENTROID=10, COHERENT=11, CONST=12, CONTINUE=13, DEFAULT=14, 
		DISCARD=15, DMAT2=16, DMAT2X2=17, DMAT2X3=18, DMAT2X4=19, DMAT3=20, DMAT3X2=21, 
		DMAT3X3=22, DMAT3X4=23, DMAT4=24, DMAT4X2=25, DMAT4X3=26, DMAT4X4=27, 
		DO=28, DOUBLE=29, DVEC2=30, DVEC3=31, DVEC4=32, ELSE=33, FALSE=34, FLAT=35, 
		FLOAT=36, FOR=37, HIGHP=38, IF=39, IIMAGE1D=40, IIMAGE1DARRAY=41, IIMAGE2D=42, 
		IIMAGE2DARRAY=43, IIMAGE2DMS=44, IIMAGE2DMSARRAY=45, IIMAGE2DRECT=46, 
		IIMAGE3D=47, IIMAGEBUFFER=48, IIMAGECUBE=49, IIMAGECUBEARRAY=50, IMAGE1D=51, 
		IMAGE1DARRAY=52, IMAGE2D=53, IMAGE2DARRAY=54, IMAGE2DMS=55, IMAGE2DMSARRAY=56, 
		IMAGE2DRECT=57, IMAGE3D=58, IMAGEBUFFER=59, IMAGECUBE=60, IMAGECUBEARRAY=61, 
		IN=62, INOUT=63, INT=64, INVARIANT=65, ISAMPLER1D=66, ISAMPLER1DARRAY=67, 
		ISAMPLER2D=68, ISAMPLER2DARRAY=69, ISAMPLER2DMS=70, ISAMPLER2DMSARRAY=71, 
		ISAMPLER2DRECT=72, ISAMPLER3D=73, ISAMPLERBUFFER=74, ISAMPLERCUBE=75, 
		ISAMPLERCUBEARRAY=76, ISUBPASSINPUT=77, ISUBPASSINPUTMS=78, ITEXTURE1D=79, 
		ITEXTURE1DARRAY=80, ITEXTURE2D=81, ITEXTURE2DARRAY=82, ITEXTURE2DMS=83, 
		ITEXTURE2DMSARRAY=84, ITEXTURE2DRECT=85, ITEXTURE3D=86, ITEXTUREBUFFER=87, 
		ITEXTURECUBE=88, ITEXTURECUBEARRAY=89, IVEC2=90, IVEC3=91, IVEC4=92, LAYOUT=93, 
		LOWP=94, MAT2=95, MAT2X2=96, MAT2X3=97, MAT2X4=98, MAT3=99, MAT3X2=100, 
		MAT3X3=101, MAT3X4=102, MAT4=103, MAT4X2=104, MAT4X3=105, MAT4X4=106, 
		MEDIUMP=107, NOPERSPECTIVE=108, OUT=109, PATCH=110, PRECISE=111, PRECISION=112, 
		READONLY=113, RESTRICT=114, RETURN=115, SAMPLE=116, SAMPLER=117, SAMPLER1D=118, 
		SAMPLER1DARRAY=119, SAMPLER1DARRAYSHADOW=120, SAMPLER1DSHADOW=121, SAMPLER2D=122, 
		SAMPLER2DARRAY=123, SAMPLER2DARRAYSHADOW=124, SAMPLER2DMS=125, SAMPLER2DMSARRAY=126, 
		SAMPLER2DRECT=127, SAMPLER2DRECTSHADOW=128, SAMPLER2DSHADOW=129, SAMPLER3D=130, 
		SAMPLERBUFFER=131, SAMPLERCUBE=132, SAMPLERCUBEARRAY=133, SAMPLERCUBEARRAYSHADOW=134, 
		SAMPLERCUBESHADOW=135, SAMPLERSHADOW=136, SHARED=137, SMOOTH=138, STRUCT=139, 
		SUBPASSINPUT=140, SUBPASSINPUTMS=141, SUBROUTINE=142, SWITCH=143, TEXTURE1D=144, 
		TEXTURE1DARRAY=145, TEXTURE2D=146, TEXTURE2DARRAY=147, TEXTURE2DMS=148, 
		TEXTURE2DMSARRAY=149, TEXTURE2DRECT=150, TEXTURE3D=151, TEXTUREBUFFER=152, 
		TEXTURECUBE=153, TEXTURECUBEARRAY=154, TRUE=155, UIMAGE1D=156, UIMAGE1DARRAY=157, 
		UIMAGE2D=158, UIMAGE2DARRAY=159, UIMAGE2DMS=160, UIMAGE2DMSARRAY=161, 
		UIMAGE2DRECT=162, UIMAGE3D=163, UIMAGEBUFFER=164, UIMAGECUBE=165, UIMAGECUBEARRAY=166, 
		UINT=167, UNIFORM=168, USAMPLER1D=169, USAMPLER1DARRAY=170, USAMPLER2D=171, 
		USAMPLER2DARRAY=172, USAMPLER2DMS=173, USAMPLER2DMSARRAY=174, USAMPLER2DRECT=175, 
		USAMPLER3D=176, USAMPLERBUFFER=177, USAMPLERCUBE=178, USAMPLERCUBEARRAY=179, 
		USUBPASSINPUT=180, USUBPASSINPUTMS=181, UTEXTURE1D=182, UTEXTURE1DARRAY=183, 
		UTEXTURE2D=184, UTEXTURE2DARRAY=185, UTEXTURE2DMS=186, UTEXTURE2DMSARRAY=187, 
		UTEXTURE2DRECT=188, UTEXTURE3D=189, UTEXTUREBUFFER=190, UTEXTURECUBE=191, 
		UTEXTURECUBEARRAY=192, UVEC2=193, UVEC3=194, UVEC4=195, VARYING=196, VEC2=197, 
		VEC3=198, VEC4=199, VOID=200, VOLATILE=201, WHILE=202, WRITEONLY=203, 
		ADD_ASSIGN=204, AMPERSAND=205, AND_ASSIGN=206, AND_OP=207, BANG=208, CARET=209, 
		COLON=210, COMMA=211, DASH=212, DEC_OP=213, DIV_ASSIGN=214, DOT=215, EQ_OP=216, 
		EQUAL=217, GE_OP=218, INC_OP=219, LE_OP=220, LEFT_ANGLE=221, LEFT_ASSIGN=222, 
		LEFT_BRACE=223, LEFT_BRACKET=224, LEFT_OP=225, LEFT_PAREN=226, MOD_ASSIGN=227, 
		MUL_ASSIGN=228, NE_OP=229, NUMBER_SIGN=230, OR_ASSIGN=231, OR_OP=232, 
		PERCENT=233, PLUS=234, QUESTION=235, RIGHT_ANGLE=236, RIGHT_ASSIGN=237, 
		RIGHT_BRACE=238, RIGHT_BRACKET=239, RIGHT_OP=240, RIGHT_PAREN=241, SEMICOLON=242, 
		SLASH=243, STAR=244, SUB_ASSIGN=245, TILDE=246, VERTICAL_BAR=247, XOR_ASSIGN=248, 
		XOR_OP=249, DOUBLECONSTANT=250, FLOATCONSTANT=251, INTCONSTANT=252, UINTCONSTANT=253, 
		BLOCK_COMMENT=254, LINE_COMMENT=255, LINE_CONTINUATION=256, IDENTIFIER=257, 
		WHITE_SPACE=258, DEFINE_DIRECTIVE=259, ELIF_DIRECTIVE=260, ELSE_DIRECTIVE=261, 
		ENDIF_DIRECTIVE=262, ERROR_DIRECTIVE=263, EXTENSION_DIRECTIVE=264, IF_DIRECTIVE=265, 
		IFDEF_DIRECTIVE=266, IFNDEF_DIRECTIVE=267, LINE_DIRECTIVE=268, PRAGMA_DIRECTIVE=269, 
		UNDEF_DIRECTIVE=270, VERSION_DIRECTIVE=271, SPACE_TAB_0=272, NEWLINE_0=273, 
		MACRO_NAME=274, NEWLINE_1=275, SPACE_TAB_1=276, CONSTANT_EXPRESSION=277, 
		NEWLINE_2=278, ERROR_MESSAGE=279, NEWLINE_3=280, BEHAVIOR=281, EXTENSION_NAME=282, 
		NEWLINE_4=283, SPACE_TAB_2=284, NEWLINE_5=285, MACRO_IDENTIFIER=286, NEWLINE_6=287, 
		SPACE_TAB_3=288, LINE_EXPRESSION=289, NEWLINE_7=290, MACRO_ESC_NEWLINE=291, 
		MACRO_TEXT=292, NEWLINE_8=293, DEBUG=294, NEWLINE_9=295, OFF=296, ON=297, 
		OPTIMIZE=298, SPACE_TAB_5=299, STDGL=300, PROGRAM_TEXT=301, NEWLINE_10=302, 
		SPACE_TAB_6=303, NEWLINE_11=304, NUMBER=305, PROFILE=306, SPACE_TAB_7=307;
	public const int
		RULE_translation_unit = 0, RULE_compiler_directive = 1, RULE_behavior = 2, 
		RULE_constant_expression = 3, RULE_define_directive = 4, RULE_elif_directive = 5, 
		RULE_else_directive = 6, RULE_endif_directive = 7, RULE_error_directive = 8, 
		RULE_error_message = 9, RULE_extension_directive = 10, RULE_extension_name = 11, 
		RULE_group_of_lines = 12, RULE_if_directive = 13, RULE_ifdef_directive = 14, 
		RULE_ifndef_directive = 15, RULE_line_directive = 16, RULE_line_expression = 17, 
		RULE_macro_esc_newline = 18, RULE_macro_identifier = 19, RULE_macro_name = 20, 
		RULE_macro_text = 21, RULE_macro_text_ = 22, RULE_number = 23, RULE_off = 24, 
		RULE_on = 25, RULE_pragma_debug = 26, RULE_pragma_directive = 27, RULE_pragma_optimize = 28, 
		RULE_profile = 29, RULE_program_text = 30, RULE_stdgl = 31, RULE_undef_directive = 32, 
		RULE_version_directive = 33;
	public static readonly string[] ruleNames = {
		"translation_unit", "compiler_directive", "behavior", "constant_expression", 
		"define_directive", "elif_directive", "else_directive", "endif_directive", 
		"error_directive", "error_message", "extension_directive", "extension_name", 
		"group_of_lines", "if_directive", "ifdef_directive", "ifndef_directive", 
		"line_directive", "line_expression", "macro_esc_newline", "macro_identifier", 
		"macro_name", "macro_text", "macro_text_", "number", "off", "on", "pragma_debug", 
		"pragma_directive", "pragma_optimize", "profile", "program_text", "stdgl", 
		"undef_directive", "version_directive"
	};

	private static readonly string[] _LiteralNames = {
		null, "'atomic_uint'", "'attribute'", "'bool'", "'break'", "'buffer'", 
		"'bvec2'", "'bvec3'", "'bvec4'", "'case'", "'centroid'", "'coherent'", 
		"'const'", "'continue'", "'default'", "'discard'", "'dmat2'", "'dmat2x2'", 
		"'dmat2x3'", "'dmat2x4'", "'dmat3'", "'dmat3x2'", "'dmat3x3'", "'dmat3x4'", 
		"'dmat4'", "'dmat4x2'", "'dmat4x3'", "'dmat4x4'", "'do'", "'double'", 
		"'dvec2'", "'dvec3'", "'dvec4'", "'else'", "'false'", "'flat'", "'float'", 
		"'for'", "'highp'", "'if'", "'iimage1D'", "'iimage1DArray'", "'iimage2D'", 
		"'iimage2DArray'", "'iimage2DMS'", "'iimage2DMSArray'", "'iimage2DRect'", 
		"'iimage3D'", "'iimageBuffer'", "'iimageCube'", "'iimageCubeArray'", "'image1D'", 
		"'image1DArray'", "'image2D'", "'image2DArray'", "'image2DMS'", "'image2DMSArray'", 
		"'image2DRect'", "'image3D'", "'imageBuffer'", "'imageCube'", "'imageCubeArray'", 
		"'in'", "'inout'", "'int'", "'invariant'", "'isampler1D'", "'isampler1DArray'", 
		"'isampler2D'", "'isampler2DArray'", "'isampler2DMS'", "'isampler2DMSArray'", 
		"'isampler2DRect'", "'isampler3D'", "'isamplerBuffer'", "'isamplerCube'", 
		"'isamplerCubeArray'", "'isubpassInput'", "'isubpassInputMS'", "'itexture1D'", 
		"'itexture1DArray'", "'itexture2D'", "'itexture2DArray'", "'itexture2DMS'", 
		"'itexture2DMSArray'", "'itexture2DRect'", "'itexture3D'", "'itextureBuffer'", 
		"'itextureCube'", "'itextureCubeArray'", "'ivec2'", "'ivec3'", "'ivec4'", 
		"'layout'", "'lowp'", "'mat2'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3'", 
		"'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4'", "'mat4x2'", "'mat4x3'", 
		"'mat4x4'", "'mediump'", "'noperspective'", "'out'", "'patch'", "'precise'", 
		"'precision'", "'readonly'", "'restrict'", "'return'", "'sample'", "'sampler'", 
		"'sampler1D'", "'sampler1DArray'", "'sampler1DArrayShadow'", "'sampler1DShadow'", 
		"'sampler2D'", "'sampler2DArray'", "'sampler2DArrayShadow'", "'sampler2DMS'", 
		"'sampler2DMSArray'", "'sampler2DRect'", "'sampler2DRectShadow'", "'sampler2DShadow'", 
		"'sampler3D'", "'samplerBuffer'", "'samplerCube'", "'samplerCubeArray'", 
		"'samplerCubeArrayShadow'", "'samplerCubeShadow'", "'samplerShadow'", 
		"'shared'", "'smooth'", "'struct'", "'subpassInput'", "'subpassInputMS'", 
		"'subroutine'", "'switch'", "'texture1D'", "'texture1DArray'", "'texture2D'", 
		"'texture2DArray'", "'texture2DMS'", "'texture2DMSArray'", "'texture2DRect'", 
		"'texture3D'", "'textureBuffer'", "'textureCube'", "'textureCubeArray'", 
		"'true'", "'uimage1D'", "'uimage1DArray'", "'uimage2D'", "'uimage2DArray'", 
		"'uimage2DMS'", "'uimage2DMSArray'", "'uimage2DRect'", "'uimage3D'", "'uimageBuffer'", 
		"'uimageCube'", "'uimageCubeArray'", "'uint'", "'uniform'", "'usampler1D'", 
		"'usampler1DArray'", "'usampler2D'", "'usampler2DArray'", "'usampler2DMS'", 
		"'usampler2DMSArray'", "'usampler2DRect'", "'usampler3D'", "'usamplerBuffer'", 
		"'usamplerCube'", "'usamplerCubeArray'", "'usubpassInput'", "'usubpassInputMS'", 
		"'utexture1D'", "'utexture1DArray'", "'utexture2D'", "'utexture2DArray'", 
		"'utexture2DMS'", "'utexture2DMSArray'", "'utexture2DRect'", "'utexture3D'", 
		"'utextureBuffer'", "'utextureCube'", "'utextureCubeArray'", "'uvec2'", 
		"'uvec3'", "'uvec4'", "'varying'", "'vec2'", "'vec3'", "'vec4'", "'void'", 
		"'volatile'", "'while'", "'writeonly'", "'+='", "'&'", "'&='", "'&&'", 
		"'!'", "'^'", "':'", "','", "'-'", "'--'", "'/='", "'.'", "'=='", "'='", 
		"'>='", "'++'", "'<='", "'<'", "'<<='", "'{'", "'['", "'<<'", "'('", "'%='", 
		"'*='", "'!='", null, "'|='", "'||'", "'%'", "'+'", "'?'", "'>'", "'>>='", 
		"'}'", "']'", "'>>'", "')'", "';'", "'/'", "'*'", "'-='", "'~'", "'|'", 
		"'^='", "'^^'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'debug'", 
		null, "'off'", "'on'", "'optimize'", null, "'STDGL'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ATOMIC_UINT", "ATTRIBUTE", "BOOL", "BREAK", "BUFFER", "BVEC2", 
		"BVEC3", "BVEC4", "CASE", "CENTROID", "COHERENT", "CONST", "CONTINUE", 
		"DEFAULT", "DISCARD", "DMAT2", "DMAT2X2", "DMAT2X3", "DMAT2X4", "DMAT3", 
		"DMAT3X2", "DMAT3X3", "DMAT3X4", "DMAT4", "DMAT4X2", "DMAT4X3", "DMAT4X4", 
		"DO", "DOUBLE", "DVEC2", "DVEC3", "DVEC4", "ELSE", "FALSE", "FLAT", "FLOAT", 
		"FOR", "HIGHP", "IF", "IIMAGE1D", "IIMAGE1DARRAY", "IIMAGE2D", "IIMAGE2DARRAY", 
		"IIMAGE2DMS", "IIMAGE2DMSARRAY", "IIMAGE2DRECT", "IIMAGE3D", "IIMAGEBUFFER", 
		"IIMAGECUBE", "IIMAGECUBEARRAY", "IMAGE1D", "IMAGE1DARRAY", "IMAGE2D", 
		"IMAGE2DARRAY", "IMAGE2DMS", "IMAGE2DMSARRAY", "IMAGE2DRECT", "IMAGE3D", 
		"IMAGEBUFFER", "IMAGECUBE", "IMAGECUBEARRAY", "IN", "INOUT", "INT", "INVARIANT", 
		"ISAMPLER1D", "ISAMPLER1DARRAY", "ISAMPLER2D", "ISAMPLER2DARRAY", "ISAMPLER2DMS", 
		"ISAMPLER2DMSARRAY", "ISAMPLER2DRECT", "ISAMPLER3D", "ISAMPLERBUFFER", 
		"ISAMPLERCUBE", "ISAMPLERCUBEARRAY", "ISUBPASSINPUT", "ISUBPASSINPUTMS", 
		"ITEXTURE1D", "ITEXTURE1DARRAY", "ITEXTURE2D", "ITEXTURE2DARRAY", "ITEXTURE2DMS", 
		"ITEXTURE2DMSARRAY", "ITEXTURE2DRECT", "ITEXTURE3D", "ITEXTUREBUFFER", 
		"ITEXTURECUBE", "ITEXTURECUBEARRAY", "IVEC2", "IVEC3", "IVEC4", "LAYOUT", 
		"LOWP", "MAT2", "MAT2X2", "MAT2X3", "MAT2X4", "MAT3", "MAT3X2", "MAT3X3", 
		"MAT3X4", "MAT4", "MAT4X2", "MAT4X3", "MAT4X4", "MEDIUMP", "NOPERSPECTIVE", 
		"OUT", "PATCH", "PRECISE", "PRECISION", "READONLY", "RESTRICT", "RETURN", 
		"SAMPLE", "SAMPLER", "SAMPLER1D", "SAMPLER1DARRAY", "SAMPLER1DARRAYSHADOW", 
		"SAMPLER1DSHADOW", "SAMPLER2D", "SAMPLER2DARRAY", "SAMPLER2DARRAYSHADOW", 
		"SAMPLER2DMS", "SAMPLER2DMSARRAY", "SAMPLER2DRECT", "SAMPLER2DRECTSHADOW", 
		"SAMPLER2DSHADOW", "SAMPLER3D", "SAMPLERBUFFER", "SAMPLERCUBE", "SAMPLERCUBEARRAY", 
		"SAMPLERCUBEARRAYSHADOW", "SAMPLERCUBESHADOW", "SAMPLERSHADOW", "SHARED", 
		"SMOOTH", "STRUCT", "SUBPASSINPUT", "SUBPASSINPUTMS", "SUBROUTINE", "SWITCH", 
		"TEXTURE1D", "TEXTURE1DARRAY", "TEXTURE2D", "TEXTURE2DARRAY", "TEXTURE2DMS", 
		"TEXTURE2DMSARRAY", "TEXTURE2DRECT", "TEXTURE3D", "TEXTUREBUFFER", "TEXTURECUBE", 
		"TEXTURECUBEARRAY", "TRUE", "UIMAGE1D", "UIMAGE1DARRAY", "UIMAGE2D", "UIMAGE2DARRAY", 
		"UIMAGE2DMS", "UIMAGE2DMSARRAY", "UIMAGE2DRECT", "UIMAGE3D", "UIMAGEBUFFER", 
		"UIMAGECUBE", "UIMAGECUBEARRAY", "UINT", "UNIFORM", "USAMPLER1D", "USAMPLER1DARRAY", 
		"USAMPLER2D", "USAMPLER2DARRAY", "USAMPLER2DMS", "USAMPLER2DMSARRAY", 
		"USAMPLER2DRECT", "USAMPLER3D", "USAMPLERBUFFER", "USAMPLERCUBE", "USAMPLERCUBEARRAY", 
		"USUBPASSINPUT", "USUBPASSINPUTMS", "UTEXTURE1D", "UTEXTURE1DARRAY", "UTEXTURE2D", 
		"UTEXTURE2DARRAY", "UTEXTURE2DMS", "UTEXTURE2DMSARRAY", "UTEXTURE2DRECT", 
		"UTEXTURE3D", "UTEXTUREBUFFER", "UTEXTURECUBE", "UTEXTURECUBEARRAY", "UVEC2", 
		"UVEC3", "UVEC4", "VARYING", "VEC2", "VEC3", "VEC4", "VOID", "VOLATILE", 
		"WHILE", "WRITEONLY", "ADD_ASSIGN", "AMPERSAND", "AND_ASSIGN", "AND_OP", 
		"BANG", "CARET", "COLON", "COMMA", "DASH", "DEC_OP", "DIV_ASSIGN", "DOT", 
		"EQ_OP", "EQUAL", "GE_OP", "INC_OP", "LE_OP", "LEFT_ANGLE", "LEFT_ASSIGN", 
		"LEFT_BRACE", "LEFT_BRACKET", "LEFT_OP", "LEFT_PAREN", "MOD_ASSIGN", "MUL_ASSIGN", 
		"NE_OP", "NUMBER_SIGN", "OR_ASSIGN", "OR_OP", "PERCENT", "PLUS", "QUESTION", 
		"RIGHT_ANGLE", "RIGHT_ASSIGN", "RIGHT_BRACE", "RIGHT_BRACKET", "RIGHT_OP", 
		"RIGHT_PAREN", "SEMICOLON", "SLASH", "STAR", "SUB_ASSIGN", "TILDE", "VERTICAL_BAR", 
		"XOR_ASSIGN", "XOR_OP", "DOUBLECONSTANT", "FLOATCONSTANT", "INTCONSTANT", 
		"UINTCONSTANT", "BLOCK_COMMENT", "LINE_COMMENT", "LINE_CONTINUATION", 
		"IDENTIFIER", "WHITE_SPACE", "DEFINE_DIRECTIVE", "ELIF_DIRECTIVE", "ELSE_DIRECTIVE", 
		"ENDIF_DIRECTIVE", "ERROR_DIRECTIVE", "EXTENSION_DIRECTIVE", "IF_DIRECTIVE", 
		"IFDEF_DIRECTIVE", "IFNDEF_DIRECTIVE", "LINE_DIRECTIVE", "PRAGMA_DIRECTIVE", 
		"UNDEF_DIRECTIVE", "VERSION_DIRECTIVE", "SPACE_TAB_0", "NEWLINE_0", "MACRO_NAME", 
		"NEWLINE_1", "SPACE_TAB_1", "CONSTANT_EXPRESSION", "NEWLINE_2", "ERROR_MESSAGE", 
		"NEWLINE_3", "BEHAVIOR", "EXTENSION_NAME", "NEWLINE_4", "SPACE_TAB_2", 
		"NEWLINE_5", "MACRO_IDENTIFIER", "NEWLINE_6", "SPACE_TAB_3", "LINE_EXPRESSION", 
		"NEWLINE_7", "MACRO_ESC_NEWLINE", "MACRO_TEXT", "NEWLINE_8", "DEBUG", 
		"NEWLINE_9", "OFF", "ON", "OPTIMIZE", "SPACE_TAB_5", "STDGL", "PROGRAM_TEXT", 
		"NEWLINE_10", "SPACE_TAB_6", "NEWLINE_11", "NUMBER", "PROFILE", "SPACE_TAB_7"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GLSLPreParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GLSLPreParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GLSLPreParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GLSLPreParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Translation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compiler_directiveContext[] compiler_directive() {
			return GetRuleContexts<Compiler_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compiler_directiveContext compiler_directive(int i) {
			return GetRuleContext<Compiler_directiveContext>(i);
		}
		public Translation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Translation_unitContext translation_unit() {
		Translation_unitContext _localctx = new Translation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NUMBER_SIGN) {
				{
				{
				State = 68;
				compiler_directive();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compiler_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Define_directiveContext define_directive() {
			return GetRuleContext<Define_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_directiveContext elif_directive() {
			return GetRuleContext<Elif_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_directiveContext else_directive() {
			return GetRuleContext<Else_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Endif_directiveContext endif_directive() {
			return GetRuleContext<Endif_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Error_directiveContext error_directive() {
			return GetRuleContext<Error_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extension_directiveContext extension_directive() {
			return GetRuleContext<Extension_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_directiveContext if_directive() {
			return GetRuleContext<If_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ifdef_directiveContext ifdef_directive() {
			return GetRuleContext<Ifdef_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ifndef_directiveContext ifndef_directive() {
			return GetRuleContext<Ifndef_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_directiveContext line_directive() {
			return GetRuleContext<Line_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_directiveContext pragma_directive() {
			return GetRuleContext<Pragma_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Undef_directiveContext undef_directive() {
			return GetRuleContext<Undef_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Version_directiveContext version_directive() {
			return GetRuleContext<Version_directiveContext>(0);
		}
		public Compiler_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompiler_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compiler_directiveContext compiler_directive() {
		Compiler_directiveContext _localctx = new Compiler_directiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_compiler_directive);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				define_directive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				elif_directive();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76;
				else_directive();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77;
				endif_directive();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 78;
				error_directive();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 79;
				extension_directive();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 80;
				if_directive();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 81;
				ifdef_directive();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 82;
				ifndef_directive();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 83;
				line_directive();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 84;
				pragma_directive();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 85;
				undef_directive();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 86;
				version_directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEHAVIOR() { return GetToken(GLSLPreParser.BEHAVIOR, 0); }
		public BehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BehaviorContext behavior() {
		BehaviorContext _localctx = new BehaviorContext(Context, State);
		EnterRule(_localctx, 4, RULE_behavior);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(BEHAVIOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT_EXPRESSION() { return GetToken(GLSLPreParser.CONSTANT_EXPRESSION, 0); }
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_constant_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(CONSTANT_EXPRESSION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_DIRECTIVE() { return GetToken(GLSLPreParser.DEFINE_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Macro_nameContext macro_name() {
			return GetRuleContext<Macro_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_textContext macro_text() {
			return GetRuleContext<Macro_textContext>(0);
		}
		public Define_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Define_directiveContext define_directive() {
		Define_directiveContext _localctx = new Define_directiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_define_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(NUMBER_SIGN);
			State = 94;
			Match(DEFINE_DIRECTIVE);
			State = 95;
			macro_name();
			State = 96;
			macro_text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF_DIRECTIVE() { return GetToken(GLSLPreParser.ELIF_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_of_linesContext group_of_lines() {
			return GetRuleContext<Group_of_linesContext>(0);
		}
		public Elif_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_directiveContext elif_directive() {
		Elif_directiveContext _localctx = new Elif_directiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_elif_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(NUMBER_SIGN);
			State = 99;
			Match(ELIF_DIRECTIVE);
			State = 100;
			constant_expression();
			State = 101;
			group_of_lines();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_DIRECTIVE() { return GetToken(GLSLPreParser.ELSE_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_of_linesContext group_of_lines() {
			return GetRuleContext<Group_of_linesContext>(0);
		}
		public Else_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_directiveContext else_directive() {
		Else_directiveContext _localctx = new Else_directiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_else_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(NUMBER_SIGN);
			State = 104;
			Match(ELSE_DIRECTIVE);
			State = 105;
			group_of_lines();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endif_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF_DIRECTIVE() { return GetToken(GLSLPreParser.ENDIF_DIRECTIVE, 0); }
		public Endif_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endif_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndif_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Endif_directiveContext endif_directive() {
		Endif_directiveContext _localctx = new Endif_directiveContext(Context, State);
		EnterRule(_localctx, 14, RULE_endif_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(NUMBER_SIGN);
			State = 108;
			Match(ENDIF_DIRECTIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_DIRECTIVE() { return GetToken(GLSLPreParser.ERROR_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public Error_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_directiveContext error_directive() {
		Error_directiveContext _localctx = new Error_directiveContext(Context, State);
		EnterRule(_localctx, 16, RULE_error_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(NUMBER_SIGN);
			State = 111;
			Match(ERROR_DIRECTIVE);
			State = 112;
			error_message();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_MESSAGE() { return GetToken(GLSLPreParser.ERROR_MESSAGE, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(Context, State);
		EnterRule(_localctx, 18, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(ERROR_MESSAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extension_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION_DIRECTIVE() { return GetToken(GLSLPreParser.EXTENSION_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extension_nameContext extension_name() {
			return GetRuleContext<Extension_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GLSLPreParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BehaviorContext behavior() {
			return GetRuleContext<BehaviorContext>(0);
		}
		public Extension_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extension_directiveContext extension_directive() {
		Extension_directiveContext _localctx = new Extension_directiveContext(Context, State);
		EnterRule(_localctx, 20, RULE_extension_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(NUMBER_SIGN);
			State = 117;
			Match(EXTENSION_DIRECTIVE);
			State = 118;
			extension_name();
			State = 119;
			Match(COLON);
			State = 120;
			behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extension_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION_NAME() { return GetToken(GLSLPreParser.EXTENSION_NAME, 0); }
		public Extension_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extension_nameContext extension_name() {
		Extension_nameContext _localctx = new Extension_nameContext(Context, State);
		EnterRule(_localctx, 22, RULE_extension_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(EXTENSION_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_of_linesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Program_textContext[] program_text() {
			return GetRuleContexts<Program_textContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Program_textContext program_text(int i) {
			return GetRuleContext<Program_textContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compiler_directiveContext[] compiler_directive() {
			return GetRuleContexts<Compiler_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compiler_directiveContext compiler_directive(int i) {
			return GetRuleContext<Compiler_directiveContext>(i);
		}
		public Group_of_linesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_of_lines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_of_lines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_of_linesContext group_of_lines() {
		Group_of_linesContext _localctx = new Group_of_linesContext(Context, State);
		EnterRule(_localctx, 24, RULE_group_of_lines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PROGRAM_TEXT:
						{
						State = 124;
						program_text();
						}
						break;
					case NUMBER_SIGN:
						{
						State = 125;
						compiler_directive();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_DIRECTIVE() { return GetToken(GLSLPreParser.IF_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_of_linesContext group_of_lines() {
			return GetRuleContext<Group_of_linesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Endif_directiveContext endif_directive() {
			return GetRuleContext<Endif_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_directiveContext[] elif_directive() {
			return GetRuleContexts<Elif_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_directiveContext elif_directive(int i) {
			return GetRuleContext<Elif_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_directiveContext else_directive() {
			return GetRuleContext<Else_directiveContext>(0);
		}
		public If_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_directiveContext if_directive() {
		If_directiveContext _localctx = new If_directiveContext(Context, State);
		EnterRule(_localctx, 26, RULE_if_directive);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(NUMBER_SIGN);
			State = 132;
			Match(IF_DIRECTIVE);
			State = 133;
			constant_expression();
			State = 134;
			group_of_lines();
			State = 138;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 135;
					elif_directive();
					}
					} 
				}
				State = 140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 141;
				else_directive();
				}
				break;
			}
			State = 144;
			endif_directive();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ifdef_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFDEF_DIRECTIVE() { return GetToken(GLSLPreParser.IFDEF_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Macro_identifierContext macro_identifier() {
			return GetRuleContext<Macro_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_of_linesContext group_of_lines() {
			return GetRuleContext<Group_of_linesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Endif_directiveContext endif_directive() {
			return GetRuleContext<Endif_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_directiveContext[] elif_directive() {
			return GetRuleContexts<Elif_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_directiveContext elif_directive(int i) {
			return GetRuleContext<Elif_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_directiveContext else_directive() {
			return GetRuleContext<Else_directiveContext>(0);
		}
		public Ifdef_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifdef_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfdef_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ifdef_directiveContext ifdef_directive() {
		Ifdef_directiveContext _localctx = new Ifdef_directiveContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifdef_directive);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(NUMBER_SIGN);
			State = 147;
			Match(IFDEF_DIRECTIVE);
			State = 148;
			macro_identifier();
			State = 149;
			group_of_lines();
			State = 153;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 150;
					elif_directive();
					}
					} 
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 156;
				else_directive();
				}
				break;
			}
			State = 159;
			endif_directive();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ifndef_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNDEF_DIRECTIVE() { return GetToken(GLSLPreParser.IFNDEF_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Macro_identifierContext macro_identifier() {
			return GetRuleContext<Macro_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_of_linesContext group_of_lines() {
			return GetRuleContext<Group_of_linesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Endif_directiveContext endif_directive() {
			return GetRuleContext<Endif_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_directiveContext[] elif_directive() {
			return GetRuleContexts<Elif_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_directiveContext elif_directive(int i) {
			return GetRuleContext<Elif_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_directiveContext else_directive() {
			return GetRuleContext<Else_directiveContext>(0);
		}
		public Ifndef_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifndef_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfndef_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ifndef_directiveContext ifndef_directive() {
		Ifndef_directiveContext _localctx = new Ifndef_directiveContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifndef_directive);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(NUMBER_SIGN);
			State = 162;
			Match(IFNDEF_DIRECTIVE);
			State = 163;
			macro_identifier();
			State = 164;
			group_of_lines();
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 165;
					elif_directive();
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 171;
				else_directive();
				}
				break;
			}
			State = 174;
			endif_directive();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_DIRECTIVE() { return GetToken(GLSLPreParser.LINE_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_expressionContext line_expression() {
			return GetRuleContext<Line_expressionContext>(0);
		}
		public Line_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_directiveContext line_directive() {
		Line_directiveContext _localctx = new Line_directiveContext(Context, State);
		EnterRule(_localctx, 32, RULE_line_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(NUMBER_SIGN);
			State = 177;
			Match(LINE_DIRECTIVE);
			State = 178;
			line_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_EXPRESSION() { return GetToken(GLSLPreParser.LINE_EXPRESSION, 0); }
		public Line_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_expressionContext line_expression() {
		Line_expressionContext _localctx = new Line_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_line_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(LINE_EXPRESSION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_esc_newlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_ESC_NEWLINE() { return GetToken(GLSLPreParser.MACRO_ESC_NEWLINE, 0); }
		public Macro_esc_newlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_esc_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_esc_newline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_esc_newlineContext macro_esc_newline() {
		Macro_esc_newlineContext _localctx = new Macro_esc_newlineContext(Context, State);
		EnterRule(_localctx, 36, RULE_macro_esc_newline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(MACRO_ESC_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_IDENTIFIER() { return GetToken(GLSLPreParser.MACRO_IDENTIFIER, 0); }
		public Macro_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_identifierContext macro_identifier() {
		Macro_identifierContext _localctx = new Macro_identifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_macro_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(MACRO_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NAME() { return GetToken(GLSLPreParser.MACRO_NAME, 0); }
		public Macro_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_nameContext macro_name() {
		Macro_nameContext _localctx = new Macro_nameContext(Context, State);
		EnterRule(_localctx, 40, RULE_macro_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(MACRO_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Macro_text_Context[] macro_text_() {
			return GetRuleContexts<Macro_text_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_text_Context macro_text_(int i) {
			return GetRuleContext<Macro_text_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_esc_newlineContext[] macro_esc_newline() {
			return GetRuleContexts<Macro_esc_newlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_esc_newlineContext macro_esc_newline(int i) {
			return GetRuleContext<Macro_esc_newlineContext>(i);
		}
		public Macro_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_textContext macro_text() {
		Macro_textContext _localctx = new Macro_textContext(Context, State);
		EnterRule(_localctx, 42, RULE_macro_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MACRO_ESC_NEWLINE || _la==MACRO_TEXT) {
				{
				State = 190;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MACRO_TEXT:
					{
					State = 188;
					macro_text_();
					}
					break;
				case MACRO_ESC_NEWLINE:
					{
					State = 189;
					macro_esc_newline();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_text_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_TEXT() { return GetToken(GLSLPreParser.MACRO_TEXT, 0); }
		public Macro_text_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_text_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_text_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_text_Context macro_text_() {
		Macro_text_Context _localctx = new Macro_text_Context(Context, State);
		EnterRule(_localctx, 44, RULE_macro_text_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(MACRO_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GLSLPreParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 46, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(GLSLPreParser.OFF, 0); }
		public OffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_off; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffContext off() {
		OffContext _localctx = new OffContext(Context, State);
		EnterRule(_localctx, 48, RULE_off);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(OFF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(GLSLPreParser.ON, 0); }
		public OnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnContext on() {
		OnContext _localctx = new OnContext(Context, State);
		EnterRule(_localctx, 50, RULE_on);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_debugContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(GLSLPreParser.DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLPreParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLPreParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnContext on() {
			return GetRuleContext<OnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OffContext off() {
			return GetRuleContext<OffContext>(0);
		}
		public Pragma_debugContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_debug; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_debug(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_debugContext pragma_debug() {
		Pragma_debugContext _localctx = new Pragma_debugContext(Context, State);
		EnterRule(_localctx, 52, RULE_pragma_debug);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(DEBUG);
			State = 204;
			Match(LEFT_PAREN);
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				{
				State = 205;
				on();
				}
				break;
			case OFF:
				{
				State = 206;
				off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 209;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA_DIRECTIVE() { return GetToken(GLSLPreParser.PRAGMA_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StdglContext stdgl() {
			return GetRuleContext<StdglContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_debugContext pragma_debug() {
			return GetRuleContext<Pragma_debugContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_optimizeContext pragma_optimize() {
			return GetRuleContext<Pragma_optimizeContext>(0);
		}
		public Pragma_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_directiveContext pragma_directive() {
		Pragma_directiveContext _localctx = new Pragma_directiveContext(Context, State);
		EnterRule(_localctx, 54, RULE_pragma_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(NUMBER_SIGN);
			State = 212;
			Match(PRAGMA_DIRECTIVE);
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STDGL:
				{
				State = 213;
				stdgl();
				}
				break;
			case DEBUG:
				{
				State = 214;
				pragma_debug();
				}
				break;
			case OPTIMIZE:
				{
				State = 215;
				pragma_optimize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_optimizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(GLSLPreParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(GLSLPreParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(GLSLPreParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnContext on() {
			return GetRuleContext<OnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OffContext off() {
			return GetRuleContext<OffContext>(0);
		}
		public Pragma_optimizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_optimize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_optimize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_optimizeContext pragma_optimize() {
		Pragma_optimizeContext _localctx = new Pragma_optimizeContext(Context, State);
		EnterRule(_localctx, 56, RULE_pragma_optimize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(OPTIMIZE);
			State = 219;
			Match(LEFT_PAREN);
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				{
				State = 220;
				on();
				}
				break;
			case OFF:
				{
				State = 221;
				off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 224;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(GLSLPreParser.PROFILE, 0); }
		public ProfileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProfile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProfileContext profile() {
		ProfileContext _localctx = new ProfileContext(Context, State);
		EnterRule(_localctx, 58, RULE_profile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(PROFILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM_TEXT() { return GetToken(GLSLPreParser.PROGRAM_TEXT, 0); }
		public Program_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Program_textContext program_text() {
		Program_textContext _localctx = new Program_textContext(Context, State);
		EnterRule(_localctx, 60, RULE_program_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(PROGRAM_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StdglContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDGL() { return GetToken(GLSLPreParser.STDGL, 0); }
		public StdglContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stdgl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStdgl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StdglContext stdgl() {
		StdglContext _localctx = new StdglContext(Context, State);
		EnterRule(_localctx, 62, RULE_stdgl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(STDGL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Undef_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEF_DIRECTIVE() { return GetToken(GLSLPreParser.UNDEF_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Macro_identifierContext macro_identifier() {
			return GetRuleContext<Macro_identifierContext>(0);
		}
		public Undef_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undef_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndef_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Undef_directiveContext undef_directive() {
		Undef_directiveContext _localctx = new Undef_directiveContext(Context, State);
		EnterRule(_localctx, 64, RULE_undef_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(NUMBER_SIGN);
			State = 233;
			Match(UNDEF_DIRECTIVE);
			State = 234;
			macro_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Version_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN() { return GetToken(GLSLPreParser.NUMBER_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_DIRECTIVE() { return GetToken(GLSLPreParser.VERSION_DIRECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProfileContext profile() {
			return GetRuleContext<ProfileContext>(0);
		}
		public Version_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSLPreParserVisitor<TResult> typedVisitor = visitor as IGLSLPreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Version_directiveContext version_directive() {
		Version_directiveContext _localctx = new Version_directiveContext(Context, State);
		EnterRule(_localctx, 66, RULE_version_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(NUMBER_SIGN);
			State = 237;
			Match(VERSION_DIRECTIVE);
			State = 238;
			number();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROFILE) {
				{
				State = 239;
				profile();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,307,243,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,5,0,70,8,0,10,0,
		12,0,73,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,88,
		8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,11,1,11,1,12,1,12,5,12,127,8,12,10,12,12,12,130,9,12,1,13,1,13,1,13,
		1,13,1,13,5,13,137,8,13,10,13,12,13,140,9,13,1,13,3,13,143,8,13,1,13,1,
		13,1,14,1,14,1,14,1,14,1,14,5,14,152,8,14,10,14,12,14,155,9,14,1,14,3,
		14,158,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,5,15,167,8,15,10,15,12,
		15,170,9,15,1,15,3,15,173,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,
		1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,5,21,191,8,21,10,21,12,21,194,
		9,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,3,26,
		208,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,217,8,27,1,28,1,28,1,
		28,1,28,3,28,223,8,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
		1,32,1,32,1,33,1,33,1,33,1,33,3,33,241,8,33,1,33,0,0,34,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,0,0,236,0,71,1,0,0,0,2,87,1,0,0,0,4,89,1,0,0,0,6,91,1,0,0,0,8,
		93,1,0,0,0,10,98,1,0,0,0,12,103,1,0,0,0,14,107,1,0,0,0,16,110,1,0,0,0,
		18,114,1,0,0,0,20,116,1,0,0,0,22,122,1,0,0,0,24,128,1,0,0,0,26,131,1,0,
		0,0,28,146,1,0,0,0,30,161,1,0,0,0,32,176,1,0,0,0,34,180,1,0,0,0,36,182,
		1,0,0,0,38,184,1,0,0,0,40,186,1,0,0,0,42,192,1,0,0,0,44,195,1,0,0,0,46,
		197,1,0,0,0,48,199,1,0,0,0,50,201,1,0,0,0,52,203,1,0,0,0,54,211,1,0,0,
		0,56,218,1,0,0,0,58,226,1,0,0,0,60,228,1,0,0,0,62,230,1,0,0,0,64,232,1,
		0,0,0,66,236,1,0,0,0,68,70,3,2,1,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,
		0,0,0,71,72,1,0,0,0,72,1,1,0,0,0,73,71,1,0,0,0,74,88,3,8,4,0,75,88,3,10,
		5,0,76,88,3,12,6,0,77,88,3,14,7,0,78,88,3,16,8,0,79,88,3,20,10,0,80,88,
		3,26,13,0,81,88,3,28,14,0,82,88,3,30,15,0,83,88,3,32,16,0,84,88,3,54,27,
		0,85,88,3,64,32,0,86,88,3,66,33,0,87,74,1,0,0,0,87,75,1,0,0,0,87,76,1,
		0,0,0,87,77,1,0,0,0,87,78,1,0,0,0,87,79,1,0,0,0,87,80,1,0,0,0,87,81,1,
		0,0,0,87,82,1,0,0,0,87,83,1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,
		0,0,0,88,3,1,0,0,0,89,90,5,281,0,0,90,5,1,0,0,0,91,92,5,277,0,0,92,7,1,
		0,0,0,93,94,5,230,0,0,94,95,5,259,0,0,95,96,3,40,20,0,96,97,3,42,21,0,
		97,9,1,0,0,0,98,99,5,230,0,0,99,100,5,260,0,0,100,101,3,6,3,0,101,102,
		3,24,12,0,102,11,1,0,0,0,103,104,5,230,0,0,104,105,5,261,0,0,105,106,3,
		24,12,0,106,13,1,0,0,0,107,108,5,230,0,0,108,109,5,262,0,0,109,15,1,0,
		0,0,110,111,5,230,0,0,111,112,5,263,0,0,112,113,3,18,9,0,113,17,1,0,0,
		0,114,115,5,279,0,0,115,19,1,0,0,0,116,117,5,230,0,0,117,118,5,264,0,0,
		118,119,3,22,11,0,119,120,5,210,0,0,120,121,3,4,2,0,121,21,1,0,0,0,122,
		123,5,282,0,0,123,23,1,0,0,0,124,127,3,60,30,0,125,127,3,2,1,0,126,124,
		1,0,0,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,
		0,129,25,1,0,0,0,130,128,1,0,0,0,131,132,5,230,0,0,132,133,5,265,0,0,133,
		134,3,6,3,0,134,138,3,24,12,0,135,137,3,10,5,0,136,135,1,0,0,0,137,140,
		1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,
		0,141,143,3,12,6,0,142,141,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,
		145,3,14,7,0,145,27,1,0,0,0,146,147,5,230,0,0,147,148,5,266,0,0,148,149,
		3,38,19,0,149,153,3,24,12,0,150,152,3,10,5,0,151,150,1,0,0,0,152,155,1,
		0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,
		156,158,3,12,6,0,157,156,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,
		3,14,7,0,160,29,1,0,0,0,161,162,5,230,0,0,162,163,5,267,0,0,163,164,3,
		38,19,0,164,168,3,24,12,0,165,167,3,10,5,0,166,165,1,0,0,0,167,170,1,0,
		0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,171,
		173,3,12,6,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,3,
		14,7,0,175,31,1,0,0,0,176,177,5,230,0,0,177,178,5,268,0,0,178,179,3,34,
		17,0,179,33,1,0,0,0,180,181,5,289,0,0,181,35,1,0,0,0,182,183,5,291,0,0,
		183,37,1,0,0,0,184,185,5,286,0,0,185,39,1,0,0,0,186,187,5,274,0,0,187,
		41,1,0,0,0,188,191,3,44,22,0,189,191,3,36,18,0,190,188,1,0,0,0,190,189,
		1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,43,1,0,0,0,
		194,192,1,0,0,0,195,196,5,292,0,0,196,45,1,0,0,0,197,198,5,305,0,0,198,
		47,1,0,0,0,199,200,5,296,0,0,200,49,1,0,0,0,201,202,5,297,0,0,202,51,1,
		0,0,0,203,204,5,294,0,0,204,207,5,226,0,0,205,208,3,50,25,0,206,208,3,
		48,24,0,207,205,1,0,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,210,5,241,
		0,0,210,53,1,0,0,0,211,212,5,230,0,0,212,216,5,269,0,0,213,217,3,62,31,
		0,214,217,3,52,26,0,215,217,3,56,28,0,216,213,1,0,0,0,216,214,1,0,0,0,
		216,215,1,0,0,0,217,55,1,0,0,0,218,219,5,298,0,0,219,222,5,226,0,0,220,
		223,3,50,25,0,221,223,3,48,24,0,222,220,1,0,0,0,222,221,1,0,0,0,223,224,
		1,0,0,0,224,225,5,241,0,0,225,57,1,0,0,0,226,227,5,306,0,0,227,59,1,0,
		0,0,228,229,5,301,0,0,229,61,1,0,0,0,230,231,5,300,0,0,231,63,1,0,0,0,
		232,233,5,230,0,0,233,234,5,270,0,0,234,235,3,38,19,0,235,65,1,0,0,0,236,
		237,5,230,0,0,237,238,5,271,0,0,238,240,3,46,23,0,239,241,3,58,29,0,240,
		239,1,0,0,0,240,241,1,0,0,0,241,67,1,0,0,0,16,71,87,126,128,138,142,153,
		157,168,172,190,192,207,216,222,240
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HereticalSolutions.HereticalEngine.Grammars
